{"ast":null,"code":"/* parser generated by jison 0.6.1-215 */\n\n/*\n * Returns a Parser object of the following structure:\n *\n *  Parser: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a derivative/copy of this one,\n *               not a direct reference!\n *  }\n *\n *  Parser.prototype: {\n *    yy: {},\n *    EOF: 1,\n *    TERROR: 2,\n *\n *    trace: function(errorMessage, ...),\n *\n *    JisonParserError: function(msg, hash),\n *\n *    quoteName: function(name),\n *               Helper function which can be overridden by user code later on: put suitable\n *               quotes around literal IDs in a description string.\n *\n *    originalQuoteName: function(name),\n *               The basic quoteName handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function\n *               at the end of the `parse()`.\n *\n *    describeSymbol: function(symbol),\n *               Return a more-or-less human-readable description of the given symbol, when\n *               available, or the symbol itself, serving as its own 'description' for lack\n *               of something better to serve up.\n *\n *               Return NULL when the symbol is unknown to the parser.\n *\n *    symbols_: {associative list: name ==> number},\n *    terminals_: {associative list: number ==> name},\n *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},\n *    terminal_descriptions_: (if there are any) {associative list: number ==> description},\n *    productions_: [...],\n *\n *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)\n *                             to store/reference the rule value `$$` and location info `@$`.\n *\n *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets\n *                 to see the same object via the `this` reference, i.e. if you wish to carry custom\n *                 data from one reduce action through to the next within a single parse run, then you\n *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.\n *\n *                 `this.yy` is a direct reference to the `yy` shared state object.\n *\n *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`\n *                 object at `parse()` start and are therefore available to the action code via the\n *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from\n *                 the %parse-param` list.\n *\n *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used\n *                             to match this rule. This is *not* the look-ahead token, but the last token\n *                             that's actually part of this rule.\n *\n *                 Formulated another way, `yytext` is the value of the token immediately preceeding\n *                 the current look-ahead token.\n *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.\n *\n *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.\n *\n *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.\n *\n *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.\n *\n *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead\n *                               of an empty object when no suitable location info can be provided.\n *\n *               - `yystate` : the current parser state number, used internally for dispatching and\n *                               executing the action code chunk matching the rule currently being reduced.\n *\n *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *                 Also note that you can access this and other stack index values using the new double-hash\n *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things\n *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.\n *                 This is made available to write very advanced grammar action rules, e.g. when you want\n *                 to investigate the parse state stack in your action code, which would, for example,\n *                 be relevant when you wish to implement error diagnostics and reporting schemes similar\n *                 to the work described here:\n *\n *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.\n *                   In Journées Francophones des Languages Applicatifs.\n *\n *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.\n *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.\n *\n *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.\n *                             constructs.\n *\n *               - `yylstack`: reference to the parser token location stack. Also accessed via\n *                             the `@1` etc. constructs.\n *\n *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are\n *                             UNDEFINED rather than an empty (location) object, when the lexer/parser\n *                             action code did not provide a suitable location info object when such a\n *                             slot was filled!\n *\n *               - `yystack` : reference to the parser token id stack. Also accessed via the\n *                             `#1` etc. constructs.\n *\n *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to\n *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might\n *                 want access this array for your own purposes, such as error analysis as mentioned above!\n *\n *                 Note that this stack stores the current stack of *tokens*, that is the sequence of\n *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*\n *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and\n *                 *reduced*.\n *\n *               - `yysstack`: reference to the parser state stack. This one carries the internal parser\n *                             *states* such as the one in `yystate`, which are used to represent\n *                             the parser state machine in the *parse table*. *Very* *internal* stuff,\n *                             what can I say? If you access this one, you're clearly doing wicked things\n *\n *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your\n *                             grammar definition file.\n *\n *    table: [...],\n *               State transition table\n *               ----------------------\n *\n *               index levels are:\n *               - `state`  --> hash table\n *               - `symbol` --> action (number or array)\n *\n *                 If the `action` is an array, these are the elements' meaning:\n *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept\n *                 - index [1]: GOTO `state`\n *\n *                 If the `action` is a number, it is the GOTO `state`\n *\n *    defaultActions: {...},\n *\n *    parseError: function(str, hash, ExceptionClass),\n *    yyError: function(str, ...),\n *    yyRecovering: function(),\n *    yyErrOk: function(),\n *    yyClearIn: function(),\n *\n *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this parser kernel in many places; example usage:\n *\n *                   var infoObj = parser.constructParseErrorInfo('fail!', null,\n *                                     parser.collect_expected_token_set(state), true);\n *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);\n *\n *    originalParseError: function(str, hash, ExceptionClass),\n *               The basic `parseError` handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function\n *               at the end of the `parse()`.\n *\n *    options: { ... parser %options ... },\n *\n *    parse: function(input[, args...]),\n *               Parse the given `input` and return the parsed value (or `true` when none was provided by\n *               the root action, in which case the parser is acting as a *matcher*).\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the jison run-time;\n *               when such a collision is detected an exception is thrown to prevent the generated run-time\n *               from silently accepting this confusing and potentially hazardous situation!\n *\n *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in\n *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state\n *               object and any collision with those will be reported by the lexer via a thrown exception.\n *\n *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown\n *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY\n *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and\n *               the internal parser gets properly garbage collected under these particular circumstances.\n *\n *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API can be invoked to calculate a spanning `yylloc` location info object.\n *\n *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case\n *               this function will attempt to obtain a suitable location marker by inspecting the location stack\n *               backwards.\n *\n *               For more info see the documentation comment further below, immediately above this function's\n *               implementation.\n *\n *    lexer: {\n *        yy: {...},           A reference to the so-called \"shared state\" `yy` once\n *                             received via a call to the `.setInput(input, yy)` lexer API.\n *        EOF: 1,\n *        ERROR: 2,\n *        JisonLexerError: function(msg, hash),\n *        parseError: function(str, hash, ExceptionClass),\n *        setInput: function(input, [yy]),\n *        input: function(),\n *        unput: function(str),\n *        more: function(),\n *        reject: function(),\n *        less: function(n),\n *        pastInput: function(n),\n *        upcomingInput: function(n),\n *        showPosition: function(),\n *        test_match: function(regex_match_array, rule_index, ...),\n *        next: function(...),\n *        lex: function(...),\n *        begin: function(condition),\n *        pushState: function(condition),\n *        popState: function(),\n *        topState: function(),\n *        _currentRules: function(),\n *        stateStackSize: function(),\n *        cleanupAfterLex: function()\n *\n *        options: { ... lexer %options ... },\n *\n *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),\n *        rules: [...],\n *        conditions: {associative list: name ==> set},\n *    }\n *  }\n *\n *\n *  token location info (@$, _$, etc.): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer and\n * parser errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *  }\n *\n * parser (grammar) errors will also provide these additional members:\n *\n *  {\n *    expected:    (array describing the set of expected tokens;\n *                  may be UNDEFINED when we cannot easily produce such a set)\n *    state:       (integer (or array when the table includes grammar collisions);\n *                  represents the current internal state of the parser kernel.\n *                  can, for example, be used to pass to the `collect_expected_token_set()`\n *                  API to obtain the expected token set)\n *    action:      (integer; represents the current internal action which will be executed)\n *    new_state:   (integer; represents the next/planned internal state, once the current\n *                  action has executed)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *    parser:      (reference to the current parser instance)\n *  }\n *\n * while `this` will reference the current parser instance.\n *\n * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    lexer:       (reference to the current lexer instance which reported the error)\n *  }\n *\n * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired\n * from either the parser or lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    exception:   (reference to the exception thrown)\n *  }\n *\n * Please do note that in the latter situation, the `expected` field will be omitted as\n * this type of failure is assumed not to be due to *parse errors* but rather due to user\n * action code in either parser or lexer failing unexpectedly.\n *\n * ---\n *\n * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.\n * These options are available:\n *\n * ### options which are global for all parser instances\n *\n *  Parser.pre_parse: function(yy)\n *                 optional: you can specify a pre_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`.\n *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: you can specify a post_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`. When it does not return any value,\n *                 the parser will return the original `retval`.\n *\n * ### options which can be set up per parser instance\n *\n *  yy: {\n *      pre_parse:  function(yy)\n *                 optional: is invoked before the parse cycle starts (and before the first\n *                 invocation of `lex()`) but immediately after the invocation of\n *                 `parser.pre_parse()`).\n *      post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: is invoked when the parse terminates due to success ('accept')\n *                 or failure (even when exceptions are thrown).\n *                 `retval` contains the return value to be produced by `Parser.parse()`;\n *                 this function can override the return value by returning another.\n *                 When it does not return any value, the parser will return the original\n *                 `retval`.\n *                 This function is invoked immediately before `parser.post_parse()`.\n *\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *      quoteName: function(name),\n *                 optional: overrides the default `quoteName` function.\n *  }\n *\n *  parser.lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\nvar parser = function () {\n  // See also:\n  // http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n  // but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n  // with userland code which might access the derived class in a 'classic' way.\n  function JisonParserError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n      enumerable: false,\n      writable: false,\n      value: 'JisonParserError'\n    });\n    if (msg == null) msg = '???';\n    Object.defineProperty(this, 'message', {\n      enumerable: false,\n      writable: true,\n      value: msg\n    });\n    this.hash = hash;\n    var stacktrace;\n\n    if (hash && hash.exception instanceof Error) {\n      var ex2 = hash.exception;\n      this.message = ex2.message || msg;\n      stacktrace = ex2.stack;\n    }\n\n    if (!stacktrace) {\n      if (Error.hasOwnProperty('captureStackTrace')) {\n        // V8/Chrome engine\n        Error.captureStackTrace(this, this.constructor);\n      } else {\n        stacktrace = new Error(msg).stack;\n      }\n    }\n\n    if (stacktrace) {\n      Object.defineProperty(this, 'stack', {\n        enumerable: false,\n        writable: false,\n        value: stacktrace\n      });\n    }\n  }\n\n  if (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);\n  } else {\n    JisonParserError.prototype = Object.create(Error.prototype);\n  }\n\n  JisonParserError.prototype.constructor = JisonParserError;\n  JisonParserError.prototype.name = 'JisonParserError'; // helper: reconstruct the productions[] table\n\n  function bp(s) {\n    var rv = [];\n    var p = s.pop;\n    var r = s.rule;\n\n    for (var i = 0, l = p.length; i < l; i++) {\n      rv.push([p[i], r[i]]);\n    }\n\n    return rv;\n  } // helper: reconstruct the defaultActions[] table\n\n\n  function bda(s) {\n    var rv = {};\n    var d = s.idx;\n    var g = s.goto;\n\n    for (var i = 0, l = d.length; i < l; i++) {\n      var j = d[i];\n      rv[j] = g[i];\n    }\n\n    return rv;\n  } // helper: reconstruct the 'goto' table\n\n\n  function bt(s) {\n    var rv = [];\n    var d = s.len;\n    var y = s.symbol;\n    var t = s.type;\n    var a = s.state;\n    var m = s.mode;\n    var g = s.goto;\n\n    for (var i = 0, l = d.length; i < l; i++) {\n      var n = d[i];\n      var q = {};\n\n      for (var j = 0; j < n; j++) {\n        var z = y.shift();\n\n        switch (t.shift()) {\n          case 2:\n            q[z] = [m.shift(), g.shift()];\n            break;\n\n          case 0:\n            q[z] = a.shift();\n            break;\n\n          default:\n            // type === 1: accept\n            q[z] = [3];\n        }\n      }\n\n      rv.push(q);\n    }\n\n    return rv;\n  } // helper: runlength encoding with increment step: code, length: step (default step = 0)\n  // `this` references an array\n\n\n  function s(c, l, a) {\n    a = a || 0;\n\n    for (var i = 0; i < l; i++) {\n      this.push(c);\n      c += a;\n    }\n  } // helper: duplicate sequence from *relative* offset and length.\n  // `this` references an array\n\n\n  function c(i, l) {\n    i = this.length - i;\n\n    for (l += i; i < l; i++) {\n      this.push(this[i]);\n    }\n  } // helper: unpack an array using helpers and data, all passed in an array argument 'a'.\n\n\n  function u(a) {\n    var rv = [];\n\n    for (var i = 0, l = a.length; i < l; i++) {\n      var e = a[i]; // Is this entry a helper function?\n\n      if (typeof e === 'function') {\n        i++;\n        e.apply(rv, a[i]);\n      } else {\n        rv.push(e);\n      }\n    }\n\n    return rv;\n  }\n\n  var parser = {\n    // Code Generator Information Report\n    // ---------------------------------\n    //\n    // Options:\n    //\n    //   default action mode: ............. [\"classic\",\"merge\"]\n    //   test-compile action mode: ........ \"parser:*,lexer:*\"\n    //   try..catch: ...................... true\n    //   default resolve on conflict: ..... true\n    //   on-demand look-ahead: ............ false\n    //   error recovery token skip maximum: 3\n    //   yyerror in parse actions is: ..... NOT recoverable,\n    //   yyerror in lexer actions and other non-fatal lexer are:\n    //   .................................. NOT recoverable,\n    //   debug grammar/output: ............ false\n    //   has partial LR conflict upgrade:   true\n    //   rudimentary token-stack support:   false\n    //   parser table compression mode: ... 2\n    //   export debug tables: ............. false\n    //   export *all* tables: ............. false\n    //   module type: ..................... commonjs\n    //   parser engine type: .............. lalr\n    //   output main() in the module: ..... true\n    //   has user-specified main(): ....... false\n    //   has user-specified require()/import modules for main():\n    //   .................................. false\n    //   number of expected conflicts: .... 0\n    //\n    //\n    // Parser Analysis flags:\n    //\n    //   no significant actions (parser is a language matcher only):\n    //   .................................. false\n    //   uses yyleng: ..................... false\n    //   uses yylineno: ................... false\n    //   uses yytext: ..................... false\n    //   uses yylloc: ..................... false\n    //   uses ParseError API: ............. false\n    //   uses YYERROR: .................... false\n    //   uses YYRECOVERING: ............... false\n    //   uses YYERROK: .................... false\n    //   uses YYCLEARIN: .................. false\n    //   tracks rule values: .............. true\n    //   assigns rule values: ............. true\n    //   uses location tracking: .......... false\n    //   assigns location: ................ false\n    //   uses yystack: .................... false\n    //   uses yysstack: ................... false\n    //   uses yysp: ....................... true\n    //   uses yyrulelength: ............... false\n    //   uses yyMergeLocationInfo API: .... false\n    //   has error recovery: .............. false\n    //   has error reporting: ............. false\n    //\n    // --------- END OF REPORT -----------\n    trace: function no_op_trace() {},\n    JisonParserError: JisonParserError,\n    yy: {},\n    options: {\n      type: \"lalr\",\n      hasPartialLrUpgradeOnConflict: true,\n      errorRecoveryTokenDiscardCount: 3\n    },\n    symbols_: {\n      \"$accept\": 0,\n      \"$end\": 1,\n      \"ADD\": 3,\n      \"ANGLE\": 16,\n      \"CHS\": 22,\n      \"COMMA\": 14,\n      \"CSS_CPROP\": 13,\n      \"CSS_VAR\": 12,\n      \"DIV\": 6,\n      \"EMS\": 20,\n      \"EOF\": 1,\n      \"EXS\": 21,\n      \"FREQ\": 18,\n      \"LENGTH\": 15,\n      \"LPAREN\": 7,\n      \"MUL\": 5,\n      \"NESTED_CALC\": 9,\n      \"NUMBER\": 11,\n      \"PERCENTAGE\": 28,\n      \"PREFIX\": 10,\n      \"REMS\": 23,\n      \"RES\": 19,\n      \"RPAREN\": 8,\n      \"SUB\": 4,\n      \"TIME\": 17,\n      \"VHS\": 24,\n      \"VMAXS\": 27,\n      \"VMINS\": 26,\n      \"VWS\": 25,\n      \"css_value\": 33,\n      \"css_variable\": 32,\n      \"error\": 2,\n      \"expression\": 29,\n      \"math_expression\": 30,\n      \"value\": 31\n    },\n    terminals_: {\n      1: \"EOF\",\n      2: \"error\",\n      3: \"ADD\",\n      4: \"SUB\",\n      5: \"MUL\",\n      6: \"DIV\",\n      7: \"LPAREN\",\n      8: \"RPAREN\",\n      9: \"NESTED_CALC\",\n      10: \"PREFIX\",\n      11: \"NUMBER\",\n      12: \"CSS_VAR\",\n      13: \"CSS_CPROP\",\n      14: \"COMMA\",\n      15: \"LENGTH\",\n      16: \"ANGLE\",\n      17: \"TIME\",\n      18: \"FREQ\",\n      19: \"RES\",\n      20: \"EMS\",\n      21: \"EXS\",\n      22: \"CHS\",\n      23: \"REMS\",\n      24: \"VHS\",\n      25: \"VWS\",\n      26: \"VMINS\",\n      27: \"VMAXS\",\n      28: \"PERCENTAGE\"\n    },\n    TERROR: 2,\n    EOF: 1,\n    // internals: defined here so the object *structure* doesn't get modified by parse() et al,\n    // thus helping JIT compilers like Chrome V8.\n    originalQuoteName: null,\n    originalParseError: null,\n    cleanupAfterParse: null,\n    constructParseErrorInfo: null,\n    yyMergeLocationInfo: null,\n    __reentrant_call_depth: 0,\n    // INTERNAL USE ONLY\n    __error_infos: [],\n    // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n    __error_recovery_infos: [],\n    // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n    // APIs which will be set up depending on user action code analysis:\n    //yyRecovering: 0,\n    //yyErrOk: 0,\n    //yyClearIn: 0,\n    // Helper APIs\n    // -----------\n    // Helper function which can be overridden by user code later on: put suitable quotes around\n    // literal IDs in a description string.\n    quoteName: function parser_quoteName(id_str) {\n      return '\"' + id_str + '\"';\n    },\n    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    getSymbolName: function parser_getSymbolName(symbol) {\n      if (this.terminals_[symbol]) {\n        return this.terminals_[symbol];\n      } // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.\n      //\n      // An example of this may be where a rule's action code contains a call like this:\n      //\n      //      parser.getSymbolName(#$)\n      //\n      // to obtain a human-readable name of the current grammar rule.\n\n\n      var s = this.symbols_;\n\n      for (var key in s) {\n        if (s[key] === symbol) {\n          return key;\n        }\n      }\n\n      return null;\n    },\n    // Return a more-or-less human-readable description of the given symbol, when available,\n    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    describeSymbol: function parser_describeSymbol(symbol) {\n      if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {\n        return this.terminal_descriptions_[symbol];\n      } else if (symbol === this.EOF) {\n        return 'end of input';\n      }\n\n      var id = this.getSymbolName(symbol);\n\n      if (id) {\n        return this.quoteName(id);\n      }\n\n      return null;\n    },\n    // Produce a (more or less) human-readable list of expected tokens at the point of failure.\n    //\n    // The produced list may contain token or token set descriptions instead of the tokens\n    // themselves to help turning this output into something that easier to read by humans\n    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,\n    // expected terminals and nonterminals is produced.\n    //\n    // The returned list (array) will not contain any duplicate entries.\n    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {\n      var TERROR = this.TERROR;\n      var tokenset = [];\n      var check = {}; // Has this (error?) state been outfitted with a custom expectations description text for human consumption?\n      // If so, use that one instead of the less palatable token set.\n\n      if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {\n        return [this.state_descriptions_[state]];\n      }\n\n      for (var p in this.table[state]) {\n        p = +p;\n\n        if (p !== TERROR) {\n          var d = do_not_describe ? p : this.describeSymbol(p);\n\n          if (d && !check[d]) {\n            tokenset.push(d);\n            check[d] = true; // Mark this token description as already mentioned to prevent outputting duplicate entries.\n          }\n        }\n      }\n\n      return tokenset;\n    },\n    productions_: bp({\n      pop: u([29, s, [30, 10], 31, 31, 32, 32, s, [33, 15]]),\n      rule: u([2, s, [3, 5], 4, 7, s, [1, 4], 2, 4, 6, s, [1, 14], 2])\n    }),\n    performAction: function parser__PerformAction(yystate\n    /* action[1] */\n    , yysp, yyvstack) {\n      /* this == yyval */\n      // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!\n      var yy = this.yy;\n      var yyparser = yy.parser;\n      var yylexer = yy.lexer;\n\n      switch (yystate) {\n        case 0:\n          /*! Production::    $accept : expression $end */\n          // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):\n          this.$ = yyvstack[yysp - 1]; // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)\n\n          break;\n\n        case 1:\n          /*! Production::    expression : math_expression EOF */\n          // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):\n          this.$ = yyvstack[yysp - 1]; // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)\n\n          return yyvstack[yysp - 1];\n          break;\n\n        case 2:\n        /*! Production::    math_expression : math_expression ADD math_expression */\n\n        case 3:\n        /*! Production::    math_expression : math_expression SUB math_expression */\n\n        case 4:\n        /*! Production::    math_expression : math_expression MUL math_expression */\n\n        case 5:\n          /*! Production::    math_expression : math_expression DIV math_expression */\n          this.$ = {\n            type: 'MathExpression',\n            operator: yyvstack[yysp - 1],\n            left: yyvstack[yysp - 2],\n            right: yyvstack[yysp]\n          };\n          break;\n\n        case 6:\n          /*! Production::    math_expression : LPAREN math_expression RPAREN */\n          this.$ = yyvstack[yysp - 1];\n          break;\n\n        case 7:\n          /*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */\n          this.$ = {\n            type: 'Calc',\n            value: yyvstack[yysp - 1]\n          };\n          break;\n\n        case 8:\n          /*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */\n          this.$ = {\n            type: 'Calc',\n            value: yyvstack[yysp - 1],\n            prefix: yyvstack[yysp - 5]\n          };\n          break;\n\n        case 9:\n        /*! Production::    math_expression : css_variable */\n\n        case 10:\n        /*! Production::    math_expression : css_value */\n\n        case 11:\n          /*! Production::    math_expression : value */\n          this.$ = yyvstack[yysp];\n          break;\n\n        case 12:\n          /*! Production::    value : NUMBER */\n          this.$ = {\n            type: 'Value',\n            value: parseFloat(yyvstack[yysp])\n          };\n          break;\n\n        case 13:\n          /*! Production::    value : SUB NUMBER */\n          this.$ = {\n            type: 'Value',\n            value: parseFloat(yyvstack[yysp]) * -1\n          };\n          break;\n\n        case 14:\n          /*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP RPAREN */\n          this.$ = {\n            type: 'CssVariable',\n            value: yyvstack[yysp - 1]\n          };\n          break;\n\n        case 15:\n          /*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP COMMA math_expression RPAREN */\n          this.$ = {\n            type: 'CssVariable',\n            value: yyvstack[yysp - 3],\n            fallback: yyvstack[yysp - 1]\n          };\n          break;\n\n        case 16:\n          /*! Production::    css_value : LENGTH */\n          this.$ = {\n            type: 'LengthValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n          };\n          break;\n\n        case 17:\n          /*! Production::    css_value : ANGLE */\n          this.$ = {\n            type: 'AngleValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n          };\n          break;\n\n        case 18:\n          /*! Production::    css_value : TIME */\n          this.$ = {\n            type: 'TimeValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n          };\n          break;\n\n        case 19:\n          /*! Production::    css_value : FREQ */\n          this.$ = {\n            type: 'FrequencyValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n          };\n          break;\n\n        case 20:\n          /*! Production::    css_value : RES */\n          this.$ = {\n            type: 'ResolutionValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n          };\n          break;\n\n        case 21:\n          /*! Production::    css_value : EMS */\n          this.$ = {\n            type: 'EmValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: 'em'\n          };\n          break;\n\n        case 22:\n          /*! Production::    css_value : EXS */\n          this.$ = {\n            type: 'ExValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: 'ex'\n          };\n          break;\n\n        case 23:\n          /*! Production::    css_value : CHS */\n          this.$ = {\n            type: 'ChValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: 'ch'\n          };\n          break;\n\n        case 24:\n          /*! Production::    css_value : REMS */\n          this.$ = {\n            type: 'RemValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: 'rem'\n          };\n          break;\n\n        case 25:\n          /*! Production::    css_value : VHS */\n          this.$ = {\n            type: 'VhValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: 'vh'\n          };\n          break;\n\n        case 26:\n          /*! Production::    css_value : VWS */\n          this.$ = {\n            type: 'VwValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: 'vw'\n          };\n          break;\n\n        case 27:\n          /*! Production::    css_value : VMINS */\n          this.$ = {\n            type: 'VminValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: 'vmin'\n          };\n          break;\n\n        case 28:\n          /*! Production::    css_value : VMAXS */\n          this.$ = {\n            type: 'VmaxValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: 'vmax'\n          };\n          break;\n\n        case 29:\n          /*! Production::    css_value : PERCENTAGE */\n          this.$ = {\n            type: 'PercentageValue',\n            value: parseFloat(yyvstack[yysp]),\n            unit: '%'\n          };\n          break;\n\n        case 30:\n          /*! Production::    css_value : SUB css_value */\n          var prev = yyvstack[yysp];\n          prev.value *= -1;\n          this.$ = prev;\n          break;\n      }\n    },\n    table: bt({\n      len: u([24, 1, 5, 23, 1, 18, s, [0, 3], 1, s, [0, 16], s, [23, 4], c, [28, 3], 0, 0, 16, 1, 6, 6, s, [0, 3], 5, 1, 2, c, [37, 3], c, [20, 3], 5, 0, 0]),\n      symbol: u([4, 7, 9, 11, 12, s, [15, 19, 1], 1, 1, s, [3, 4, 1], c, [30, 19], c, [29, 4], 7, 4, 10, 11, c, [22, 14], c, [19, 3], c, [43, 22], c, [23, 69], c, [139, 4], 8, c, [51, 24], 4, c, [138, 15], 13, c, [186, 5], 8, c, [6, 6], c, [5, 5], 9, 8, 14, c, [159, 47], c, [60, 10]]),\n      type: u([s, [2, 19], s, [0, 5], 1, s, [2, 24], s, [0, 4], c, [22, 19], c, [43, 42], c, [23, 70], c, [28, 25], c, [45, 25], c, [113, 54]]),\n      state: u([1, 2, 8, 6, 7, 30, c, [4, 3], 33, 37, c, [5, 3], 38, c, [4, 3], 39, c, [4, 3], 40, c, [4, 3], 42, c, [21, 4], 50, c, [5, 3], 51, c, [4, 3]]),\n      mode: u([s, [1, 179], s, [2, 3], c, [5, 5], c, [6, 4], s, [1, 57]]),\n      goto: u([5, 3, 4, 24, s, [9, 15, 1], s, [25, 5, 1], c, [24, 19], 31, 35, 32, 34, c, [18, 14], 36, c, [38, 19], c, [19, 57], c, [118, 4], 41, c, [24, 19], 43, 35, c, [16, 14], 44, s, [2, 3], 28, 29, 2, s, [3, 3], 28, 29, 3, c, [53, 4], s, [45, 5, 1], c, [100, 42], 52, c, [5, 4], 53])\n    }),\n    defaultActions: bda({\n      idx: u([6, 7, 8, s, [10, 16, 1], 33, 34, 39, 40, 41, 45, 47, 52, 53]),\n      goto: u([9, 10, 11, s, [16, 14, 1], 12, 1, 30, 13, s, [4, 4, 1], 14, 15, 8])\n    }),\n    parseError: function parseError(str, hash, ExceptionClass) {\n      if (hash.recoverable) {\n        if (typeof this.trace === 'function') {\n          this.trace(str);\n        }\n\n        hash.destroy(); // destroy... well, *almost*!\n      } else {\n        if (typeof this.trace === 'function') {\n          this.trace(str);\n        }\n\n        if (!ExceptionClass) {\n          ExceptionClass = this.JisonParserError;\n        }\n\n        throw new ExceptionClass(str, hash);\n      }\n    },\n    parse: function parse(input) {\n      var self = this;\n      var stack = new Array(128); // token stack: stores token which leads to state at the same index (column storage)\n\n      var sstack = new Array(128); // state stack: stores states (column storage)\n\n      var vstack = new Array(128); // semantic value stack\n\n      var table = this.table;\n      var sp = 0; // 'stack pointer': index into the stacks\n\n      var symbol = 0;\n      var TERROR = this.TERROR;\n      var EOF = this.EOF;\n      var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = this.options.errorRecoveryTokenDiscardCount | 0 || 3;\n      var NO_ACTION = [0, 54\n      /* === table.length :: ensures that anyone using this new state will fail dramatically! */\n      ];\n      var lexer;\n\n      if (this.__lexer__) {\n        lexer = this.__lexer__;\n      } else {\n        lexer = this.__lexer__ = Object.create(this.lexer);\n      }\n\n      var sharedState_yy = {\n        parseError: undefined,\n        quoteName: undefined,\n        lexer: undefined,\n        parser: undefined,\n        pre_parse: undefined,\n        post_parse: undefined,\n        pre_lex: undefined,\n        post_lex: undefined // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!\n\n      };\n      var ASSERT;\n\n      if (typeof assert !== 'function') {\n        ASSERT = function JisonAssert(cond, msg) {\n          if (!cond) {\n            throw new Error('assertion failed: ' + (msg || '***'));\n          }\n        };\n      } else {\n        ASSERT = assert;\n      }\n\n      this.yyGetSharedState = function yyGetSharedState() {\n        return sharedState_yy;\n      };\n\n      function shallow_copy_noclobber(dst, src) {\n        for (var k in src) {\n          if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {\n            dst[k] = src[k];\n          }\n        }\n      } // copy state\n\n\n      shallow_copy_noclobber(sharedState_yy, this.yy);\n      sharedState_yy.lexer = lexer;\n      sharedState_yy.parser = this; // Does the shared state override the default `parseError` that already comes with this instance?\n\n      if (typeof sharedState_yy.parseError === 'function') {\n        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {\n          if (!ExceptionClass) {\n            ExceptionClass = this.JisonParserError;\n          }\n\n          return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);\n        };\n      } else {\n        this.parseError = this.originalParseError;\n      } // Does the shared state override the default `quoteName` that already comes with this instance?\n\n\n      if (typeof sharedState_yy.quoteName === 'function') {\n        this.quoteName = function quoteNameAlt(id_str) {\n          return sharedState_yy.quoteName.call(this, id_str);\n        };\n      } else {\n        this.quoteName = this.originalQuoteName;\n      } // set up the cleanup function; make it an API so that external code can re-use this one in case of\n      // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which\n      // case this parse() API method doesn't come with a `finally { ... }` block any more!\n      //\n      // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n      //       or else your `sharedState`, etc. references will be *wrong*!\n\n\n      this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {\n        var rv;\n\n        if (invoke_post_methods) {\n          var hash;\n\n          if (sharedState_yy.post_parse || this.post_parse) {\n            // create an error hash info instance: we re-use this API in a **non-error situation**\n            // as this one delivers all parser internals ready for access by userland code.\n            hash = this.constructParseErrorInfo(null\n            /* no error! */\n            , null\n            /* no exception! */\n            , null, false);\n          }\n\n          if (sharedState_yy.post_parse) {\n            rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);\n            if (typeof rv !== 'undefined') resultValue = rv;\n          }\n\n          if (this.post_parse) {\n            rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);\n            if (typeof rv !== 'undefined') resultValue = rv;\n          } // cleanup:\n\n\n          if (hash && hash.destroy) {\n            hash.destroy();\n          }\n        }\n\n        if (this.__reentrant_call_depth > 1) return resultValue; // do not (yet) kill the sharedState when this is a reentrant run.\n        // clean up the lingering lexer structures as well:\n\n        if (lexer.cleanupAfterLex) {\n          lexer.cleanupAfterLex(do_not_nuke_errorinfos);\n        } // prevent lingering circular references from causing memory leaks:\n\n\n        if (sharedState_yy) {\n          sharedState_yy.lexer = undefined;\n          sharedState_yy.parser = undefined;\n\n          if (lexer.yy === sharedState_yy) {\n            lexer.yy = undefined;\n          }\n        }\n\n        sharedState_yy = undefined;\n        this.parseError = this.originalParseError;\n        this.quoteName = this.originalQuoteName; // nuke the vstack[] array at least as that one will still reference obsoleted user values.\n        // To be safe, we nuke the other internal stack columns as well...\n\n        stack.length = 0; // fastest way to nuke an array without overly bothering the GC\n\n        sstack.length = 0;\n        vstack.length = 0;\n        sp = 0; // nuke the error hash info instances created during this run.\n        // Userland code must COPY any data/references\n        // in the error hash instance(s) it is more permanently interested in.\n\n        if (!do_not_nuke_errorinfos) {\n          for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n            var el = this.__error_infos[i];\n\n            if (el && typeof el.destroy === 'function') {\n              el.destroy();\n            }\n          }\n\n          this.__error_infos.length = 0;\n        }\n\n        return resultValue;\n      }; // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n      //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!\n\n\n      this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {\n        var pei = {\n          errStr: msg,\n          exception: ex,\n          text: lexer.match,\n          value: lexer.yytext,\n          token: this.describeSymbol(symbol) || symbol,\n          token_id: symbol,\n          line: lexer.yylineno,\n          expected: expected,\n          recoverable: recoverable,\n          state: state,\n          action: action,\n          new_state: newState,\n          symbol_stack: stack,\n          state_stack: sstack,\n          value_stack: vstack,\n          stack_pointer: sp,\n          yy: sharedState_yy,\n          lexer: lexer,\n          parser: this,\n          // and make sure the error info doesn't stay due to potential\n          // ref cycle via userland code manipulations.\n          // These would otherwise all be memory leak opportunities!\n          //\n          // Note that only array and object references are nuked as those\n          // constitute the set of elements which can produce a cyclic ref.\n          // The rest of the members is kept intact as they are harmless.\n          destroy: function destructParseErrorInfo() {\n            // remove cyclic references added to error info:\n            // info.yy = null;\n            // info.lexer = null;\n            // info.value = null;\n            // info.value_stack = null;\n            // ...\n            var rec = !!this.recoverable;\n\n            for (var key in this) {\n              if (this.hasOwnProperty(key) && typeof key === 'object') {\n                this[key] = undefined;\n              }\n            }\n\n            this.recoverable = rec;\n          }\n        }; // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n\n        this.__error_infos.push(pei);\n\n        return pei;\n      };\n\n      function getNonTerminalFromCode(symbol) {\n        var tokenName = self.getSymbolName(symbol);\n\n        if (!tokenName) {\n          tokenName = symbol;\n        }\n\n        return tokenName;\n      }\n\n      function stdLex() {\n        var token = lexer.lex(); // if token isn't its numeric value, convert\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token || EOF;\n      }\n\n      function fastLex() {\n        var token = lexer.fastLex(); // if token isn't its numeric value, convert\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token || EOF;\n      }\n\n      var lex = stdLex;\n      var state, action, r, t;\n      var yyval = {\n        $: true,\n        _$: undefined,\n        yy: sharedState_yy\n      };\n      var p;\n      var yyrulelen;\n      var this_production;\n      var newState;\n      var retval = false;\n\n      try {\n        this.__reentrant_call_depth++;\n        lexer.setInput(input, sharedState_yy); // NOTE: we *assume* no lexer pre/post handlers are set up *after* \n        // this initial `setInput()` call: hence we can now check and decide\n        // whether we'll go with the standard, slower, lex() API or the\n        // `fast_lex()` one:\n\n        if (typeof lexer.canIUse === 'function') {\n          var lexerInfo = lexer.canIUse();\n\n          if (lexerInfo.fastLex && typeof fastLex === 'function') {\n            lex = fastLex;\n          }\n        }\n\n        vstack[sp] = null;\n        sstack[sp] = 0;\n        stack[sp] = 0;\n        ++sp;\n\n        if (this.pre_parse) {\n          this.pre_parse.call(this, sharedState_yy);\n        }\n\n        if (sharedState_yy.pre_parse) {\n          sharedState_yy.pre_parse.call(this, sharedState_yy);\n        }\n\n        newState = sstack[sp - 1];\n\n        for (;;) {\n          // retrieve state number from top of stack\n          state = newState; // sstack[sp - 1];\n          // use default actions if available\n\n          if (this.defaultActions[state]) {\n            action = 2;\n            newState = this.defaultActions[state];\n          } else {\n            // The single `==` condition below covers both these `===` comparisons in a single\n            // operation:\n            //\n            //     if (symbol === null || typeof symbol === 'undefined') ...\n            if (!symbol) {\n              symbol = lex();\n            } // read action for current state and first input\n\n\n            t = table[state] && table[state][symbol] || NO_ACTION;\n            newState = t[1];\n            action = t[0]; // handle parse error\n\n            if (!action) {\n              var errStr;\n              var errSymbolDescr = this.describeSymbol(symbol) || symbol;\n              var expected = this.collect_expected_token_set(state); // Report error\n\n              if (typeof lexer.yylineno === 'number') {\n                errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';\n              } else {\n                errStr = 'Parse error: ';\n              }\n\n              if (typeof lexer.showPosition === 'function') {\n                errStr += '\\n' + lexer.showPosition(79 - 10, 10) + '\\n';\n              }\n\n              if (expected.length) {\n                errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;\n              } else {\n                errStr += 'Unexpected ' + errSymbolDescr;\n              } // we cannot recover from the error!\n\n\n              p = this.constructParseErrorInfo(errStr, null, expected, false);\n              r = this.parseError(p.errStr, p, this.JisonParserError);\n\n              if (typeof r !== 'undefined') {\n                retval = r;\n              }\n\n              break;\n            }\n          }\n\n          switch (action) {\n            // catch misc. parse failures:\n            default:\n              // this shouldn't happen, unless resolve defaults are off\n              if (action instanceof Array) {\n                p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);\n                r = this.parseError(p.errStr, p, this.JisonParserError);\n\n                if (typeof r !== 'undefined') {\n                  retval = r;\n                }\n\n                break;\n              } // Another case of better safe than sorry: in case state transitions come out of another error recovery process\n              // or a buggy LUT (LookUp Table):\n\n\n              p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);\n              r = this.parseError(p.errStr, p, this.JisonParserError);\n\n              if (typeof r !== 'undefined') {\n                retval = r;\n              }\n\n              break;\n            // shift:\n\n            case 1:\n              stack[sp] = symbol;\n              vstack[sp] = lexer.yytext;\n              sstack[sp] = newState; // push state\n\n              ++sp;\n              symbol = 0; // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:\n\n              continue;\n            // reduce:\n\n            case 2:\n              this_production = this.productions_[newState - 1]; // `this.productions_[]` is zero-based indexed while states start from 1 upwards...\n\n              yyrulelen = this_production[1];\n              r = this.performAction.call(yyval, newState, sp - 1, vstack);\n\n              if (typeof r !== 'undefined') {\n                retval = r;\n                break;\n              } // pop off stack\n\n\n              sp -= yyrulelen; // don't overwrite the `symbol` variable: use a local var to speed things up:\n\n              var ntsymbol = this_production[0]; // push nonterminal (reduce)\n\n              stack[sp] = ntsymbol;\n              vstack[sp] = yyval.$; // goto new state = table[STATE][NONTERMINAL]\n\n              newState = table[sstack[sp - 1]][ntsymbol];\n              sstack[sp] = newState;\n              ++sp;\n              continue;\n            // accept:\n\n            case 3:\n              if (sp !== -2) {\n                retval = true; // Return the `$accept` rule's `$$` result, if available.\n                //\n                // Also note that JISON always adds this top-most `$accept` rule (with implicit,\n                // default, action):\n                //\n                //     $accept: <startSymbol> $end\n                //                  %{ $$ = $1; @$ = @1; %}\n                //\n                // which, combined with the parse kernel's `$accept` state behaviour coded below,\n                // will produce the `$$` value output of the <startSymbol> rule as the parse result,\n                // IFF that result is *not* `undefined`. (See also the parser kernel code.)\n                //\n                // In code:\n                //\n                //                  %{\n                //                      @$ = @1;            // if location tracking support is included\n                //                      if (typeof $1 !== 'undefined')\n                //                          return $1;\n                //                      else\n                //                          return true;           // the default parse result if the rule actions don't produce anything\n                //                  %}\n\n                sp--;\n\n                if (typeof vstack[sp] !== 'undefined') {\n                  retval = vstack[sp];\n                }\n              }\n\n              break;\n          } // break out of loop: we accept or fail with error\n\n\n          break;\n        }\n      } catch (ex) {\n        // report exceptions through the parseError callback too, but keep the exception intact\n        // if it is a known parser or lexer error which has been thrown by parseError() already:\n        if (ex instanceof this.JisonParserError) {\n          throw ex;\n        } else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {\n          throw ex;\n        }\n\n        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);\n        retval = false;\n        r = this.parseError(p.errStr, p, this.JisonParserError);\n\n        if (typeof r !== 'undefined') {\n          retval = r;\n        }\n      } finally {\n        retval = this.cleanupAfterParse(retval, true, true);\n        this.__reentrant_call_depth--;\n      } // /finally\n\n\n      return retval;\n    }\n  };\n  parser.originalParseError = parser.parseError;\n  parser.originalQuoteName = parser.quoteName;\n  /* lexer generated by jison-lex 0.6.1-215 */\n\n  /*\n   * Returns a Lexer object of the following structure:\n   *\n   *  Lexer: {\n   *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n   *               the real \"shared state\" `yy` passed around to\n   *               the rule actions, etc. is a direct reference!\n   *\n   *               This \"shared context\" object was passed to the lexer by way of \n   *               the `lexer.setInput(str, yy)` API before you may use it.\n   *\n   *               This \"shared context\" object is passed to the lexer action code in `performAction()`\n   *               so userland code in the lexer actions may communicate with the outside world \n   *               and/or other lexer rules' actions in more or less complex ways.\n   *\n   *  }\n   *\n   *  Lexer.prototype: {\n   *    EOF: 1,\n   *    ERROR: 2,\n   *\n   *    yy:        The overall \"shared context\" object reference.\n   *\n   *    JisonLexerError: function(msg, hash),\n   *\n   *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),\n   *\n   *               The function parameters and `this` have the following value/meaning:\n   *               - `this`    : reference to the `lexer` instance. \n   *                               `yy_` is an alias for `this` lexer instance reference used internally.\n   *\n   *               - `yy`      : a reference to the `yy` \"shared state\" object which was passed to the lexer\n   *                             by way of the `lexer.setInput(str, yy)` API before.\n   *\n   *                             Note:\n   *                             The extra arguments you specified in the `%parse-param` statement in your\n   *                             **parser** grammar definition file are passed to the lexer via this object\n   *                             reference as member variables.\n   *\n   *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.\n   *\n   *               - `YY_START`: the current lexer \"start condition\" state.\n   *\n   *    parseError: function(str, hash, ExceptionClass),\n   *\n   *    constructLexErrorInfo: function(error_message, is_recoverable),\n   *               Helper function.\n   *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n   *               See it's use in this lexer kernel in many places; example usage:\n   *\n   *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);\n   *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);\n   *\n   *    options: { ... lexer %options ... },\n   *\n   *    lex: function(),\n   *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.\n   *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:\n   *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n   *\n   *               WARNING:\n   *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with\n   *               any attributes already added to `yy` by the **parser** or the jison run-time; \n   *               when such a collision is detected an exception is thrown to prevent the generated run-time \n   *               from silently accepting this confusing and potentially hazardous situation! \n   *\n   *    cleanupAfterLex: function(do_not_nuke_errorinfos),\n   *               Helper function.\n   *\n   *               This helper API is invoked when the **parse process** has completed: it is the responsibility\n   *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. \n   *\n   *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.\n   *\n   *    setInput: function(input, [yy]),\n   *\n   *\n   *    input: function(),\n   *\n   *\n   *    unput: function(str),\n   *\n   *\n   *    more: function(),\n   *\n   *\n   *    reject: function(),\n   *\n   *\n   *    less: function(n),\n   *\n   *\n   *    pastInput: function(n),\n   *\n   *\n   *    upcomingInput: function(n),\n   *\n   *\n   *    showPosition: function(),\n   *\n   *\n   *    test_match: function(regex_match_array, rule_index),\n   *\n   *\n   *    next: function(),\n   *\n   *\n   *    begin: function(condition),\n   *\n   *\n   *    pushState: function(condition),\n   *\n   *\n   *    popState: function(),\n   *\n   *\n   *    topState: function(),\n   *\n   *\n   *    _currentRules: function(),\n   *\n   *\n   *    stateStackSize: function(),\n   *\n   *\n   *    performAction: function(yy, yy_, yyrulenumber, YY_START),\n   *\n   *\n   *    rules: [...],\n   *\n   *\n   *    conditions: {associative list: name ==> set},\n   *  }\n   *\n   *\n   *  token location info (`yylloc`): {\n   *    first_line: n,\n   *    last_line: n,\n   *    first_column: n,\n   *    last_column: n,\n   *    range: [start_number, end_number]\n   *               (where the numbers are indexes into the input string, zero-based)\n   *  }\n   *\n   * ---\n   *\n   * The `parseError` function receives a 'hash' object with these members for lexer errors:\n   *\n   *  {\n   *    text:        (matched text)\n   *    token:       (the produced terminal token, if any)\n   *    token_id:    (the produced terminal token numeric ID, if any)\n   *    line:        (yylineno)\n   *    loc:         (yylloc)\n   *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n   *                  available for this particular error)\n   *    yy:          (object: the current parser internal \"shared state\" `yy`\n   *                  as is also available in the rule actions; this can be used,\n   *                  for instance, for advanced error analysis and reporting)\n   *    lexer:       (reference to the current lexer instance used by the parser)\n   *  }\n   *\n   * while `this` will reference the current lexer instance.\n   *\n   * When `parseError` is invoked by the lexer, the default implementation will\n   * attempt to invoke `yy.parser.parseError()`; when this callback is not provided\n   * it will try to invoke `yy.parseError()` instead. When that callback is also not\n   * provided, a `JisonLexerError` exception will be thrown containing the error\n   * message and `hash`, as constructed by the `constructLexErrorInfo()` API.\n   *\n   * Note that the lexer's `JisonLexerError` error class is passed via the\n   * `ExceptionClass` argument, which is invoked to construct the exception\n   * instance to be thrown, so technically `parseError` will throw the object\n   * produced by the `new ExceptionClass(str, hash)` JavaScript expression.\n   *\n   * ---\n   *\n   * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.\n   * These options are available:\n   *\n   * (Options are permanent.)\n   *  \n   *  yy: {\n   *      parseError: function(str, hash, ExceptionClass)\n   *                 optional: overrides the default `parseError` function.\n   *  }\n   *\n   *  lexer.options: {\n   *      pre_lex:  function()\n   *                 optional: is invoked before the lexer is invoked to produce another token.\n   *                 `this` refers to the Lexer object.\n   *      post_lex: function(token) { return token; }\n   *                 optional: is invoked when the lexer has produced a token `token`;\n   *                 this function can override the returned token value by returning another.\n   *                 When it does not return any (truthy) value, the lexer will return\n   *                 the original `token`.\n   *                 `this` refers to the Lexer object.\n   *\n   * WARNING: the next set of options are not meant to be changed. They echo the abilities of\n   * the lexer as per when it was compiled!\n   *\n   *      ranges: boolean\n   *                 optional: `true` ==> token location info will include a .range[] member.\n   *      flex: boolean\n   *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n   *                 exhaustively to find the longest match.\n   *      backtrack_lexer: boolean\n   *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n   *                 the lexer terminates the scan when a token is returned by the action code.\n   *      xregexp: boolean\n   *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n   *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer\n   *                 rule regexes have been written as standard JavaScript RegExp expressions.\n   *  }\n   */\n\n  var lexer = function () {\n    /**\n     * See also:\n     * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n     * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n     * with userland code which might access the derived class in a 'classic' way.\n     *\n     * @public\n     * @constructor\n     * @nocollapse\n     */\n    function JisonLexerError(msg, hash) {\n      Object.defineProperty(this, 'name', {\n        enumerable: false,\n        writable: false,\n        value: 'JisonLexerError'\n      });\n      if (msg == null) msg = '???';\n      Object.defineProperty(this, 'message', {\n        enumerable: false,\n        writable: true,\n        value: msg\n      });\n      this.hash = hash;\n      var stacktrace;\n\n      if (hash && hash.exception instanceof Error) {\n        var ex2 = hash.exception;\n        this.message = ex2.message || msg;\n        stacktrace = ex2.stack;\n      }\n\n      if (!stacktrace) {\n        if (Error.hasOwnProperty('captureStackTrace')) {\n          // V8\n          Error.captureStackTrace(this, this.constructor);\n        } else {\n          stacktrace = new Error(msg).stack;\n        }\n      }\n\n      if (stacktrace) {\n        Object.defineProperty(this, 'stack', {\n          enumerable: false,\n          writable: false,\n          value: stacktrace\n        });\n      }\n    }\n\n    if (typeof Object.setPrototypeOf === 'function') {\n      Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);\n    } else {\n      JisonLexerError.prototype = Object.create(Error.prototype);\n    }\n\n    JisonLexerError.prototype.constructor = JisonLexerError;\n    JisonLexerError.prototype.name = 'JisonLexerError';\n    var lexer = {\n      // Code Generator Information Report\n      // ---------------------------------\n      //\n      // Options:\n      //\n      //   backtracking: .................... false\n      //   location.ranges: ................. false\n      //   location line+column tracking: ... true\n      //\n      //\n      // Forwarded Parser Analysis flags:\n      //\n      //   uses yyleng: ..................... false\n      //   uses yylineno: ................... false\n      //   uses yytext: ..................... false\n      //   uses yylloc: ..................... false\n      //   uses lexer values: ............... true / true\n      //   location tracking: ............... false\n      //   location assignment: ............. false\n      //\n      //\n      // Lexer Analysis flags:\n      //\n      //   uses yyleng: ..................... ???\n      //   uses yylineno: ................... ???\n      //   uses yytext: ..................... ???\n      //   uses yylloc: ..................... ???\n      //   uses ParseError API: ............. ???\n      //   uses yyerror: .................... ???\n      //   uses location tracking & editing:  ???\n      //   uses more() API: ................. ???\n      //   uses unput() API: ................ ???\n      //   uses reject() API: ............... ???\n      //   uses less() API: ................. ???\n      //   uses display APIs pastInput(), upcomingInput(), showPosition():\n      //        ............................. ???\n      //   uses describeYYLLOC() API: ....... ???\n      //\n      // --------- END OF REPORT -----------\n      EOF: 1,\n      ERROR: 2,\n      // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator\n      // options: {},                             /// <-- injected by the code generator\n      // yy: ...,                                 /// <-- injected by setInput()\n      __currentRuleSet__: null,\n      /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  \n      __error_infos: [],\n      /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  \n      __decompressed: false,\n      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  \n      done: false,\n      /// INTERNAL USE ONLY  \n      _backtrack: false,\n      /// INTERNAL USE ONLY  \n      _input: '',\n      /// INTERNAL USE ONLY  \n      _more: false,\n      /// INTERNAL USE ONLY  \n      _signaled_error_token: false,\n      /// INTERNAL USE ONLY  \n      conditionStack: [],\n      /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  \n      match: '',\n      /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  \n      matched: '',\n      /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  \n      matches: false,\n      /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  \n      yytext: '',\n      /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  \n      offset: 0,\n      /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  \n      yyleng: 0,\n      /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  \n      yylineno: 0,\n      /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  \n      yylloc: null,\n      /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  \n\n      /**\n       * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {\n        msg = '' + msg; // heuristic to determine if the error message already contains a (partial) source code dump\n        // as produced by either `showPosition()` or `prettyPrintRange()`:\n\n        if (show_input_position == undefined) {\n          show_input_position = !(msg.indexOf('\\n') > 0 && msg.indexOf('^') > 0);\n        }\n\n        if (this.yylloc && show_input_position) {\n          if (typeof this.prettyPrintRange === 'function') {\n            var pretty_src = this.prettyPrintRange(this.yylloc);\n\n            if (!/\\n\\s*$/.test(msg)) {\n              msg += '\\n';\n            }\n\n            msg += '\\n  Erroneous area:\\n' + this.prettyPrintRange(this.yylloc);\n          } else if (typeof this.showPosition === 'function') {\n            var pos_str = this.showPosition();\n\n            if (pos_str) {\n              if (msg.length && msg[msg.length - 1] !== '\\n' && pos_str[0] !== '\\n') {\n                msg += '\\n' + pos_str;\n              } else {\n                msg += pos_str;\n              }\n            }\n          }\n        }\n        /** @constructor */\n\n\n        var pei = {\n          errStr: msg,\n          recoverable: !!recoverable,\n          text: this.match,\n          // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  \n          token: null,\n          line: this.yylineno,\n          loc: this.yylloc,\n          yy: this.yy,\n          lexer: this,\n\n          /**\n           * and make sure the error info doesn't stay due to potential\n           * ref cycle via userland code manipulations.\n           * These would otherwise all be memory leak opportunities!\n           * \n           * Note that only array and object references are nuked as those\n           * constitute the set of elements which can produce a cyclic ref.\n           * The rest of the members is kept intact as they are harmless.\n           * \n           * @public\n           * @this {LexErrorInfo}\n           */\n          destroy: function destructLexErrorInfo() {\n            // remove cyclic references added to error info:\n            // info.yy = null;\n            // info.lexer = null;\n            // ...\n            var rec = !!this.recoverable;\n\n            for (var key in this) {\n              if (this.hasOwnProperty(key) && typeof key === 'object') {\n                this[key] = undefined;\n              }\n            }\n\n            this.recoverable = rec;\n          }\n        }; // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n\n        this.__error_infos.push(pei);\n\n        return pei;\n      },\n\n      /**\n       * handler which is invoked when a lexer error occurs.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      parseError: function lexer_parseError(str, hash, ExceptionClass) {\n        if (!ExceptionClass) {\n          ExceptionClass = this.JisonLexerError;\n        }\n\n        if (this.yy) {\n          if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {\n            return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n          } else if (typeof this.yy.parseError === 'function') {\n            return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n          }\n        }\n\n        throw new ExceptionClass(str, hash);\n      },\n\n      /**\n       * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      yyerror: function yyError(str\n      /*, ...args */\n      ) {\n        var lineno_msg = '';\n\n        if (this.yylloc) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': ' + str, this.options.lexerErrorsAreRecoverable); // Add any extra args to the hash under the name `extra_error_attributes`:\n\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        if (args.length) {\n          p.extra_error_attributes = args;\n        }\n\n        return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n      },\n\n      /**\n       * final cleanup function for when we have completed lexing the input;\n       * make it an API so that external code can use this one once userland\n       * code has decided it's time to destroy any lingering lexer error\n       * hash object instances and the like: this function helps to clean\n       * up these constructs, which *may* carry cyclic references which would\n       * otherwise prevent the instances from being properly and timely\n       * garbage-collected, i.e. this function helps prevent memory leaks!\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {\n        // prevent lingering circular references from causing memory leaks:\n        this.setInput('', {}); // nuke the error hash info instances created during this run.\n        // Userland code must COPY any data/references\n        // in the error hash instance(s) it is more permanently interested in.\n\n        if (!do_not_nuke_errorinfos) {\n          for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n            var el = this.__error_infos[i];\n\n            if (el && typeof el.destroy === 'function') {\n              el.destroy();\n            }\n          }\n\n          this.__error_infos.length = 0;\n        }\n\n        return this;\n      },\n\n      /**\n       * clear the lexer token context; intended for internal use only\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      clear: function lexer_clear() {\n        this.yytext = '';\n        this.yyleng = 0;\n        this.match = ''; // - DO NOT reset `this.matched`\n\n        this.matches = false;\n        this._more = false;\n        this._backtrack = false;\n        var col = this.yylloc ? this.yylloc.last_column : 0;\n        this.yylloc = {\n          first_line: this.yylineno + 1,\n          first_column: col,\n          last_line: this.yylineno + 1,\n          last_column: col,\n          range: [this.offset, this.offset]\n        };\n      },\n\n      /**\n       * resets the lexer, sets new input\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      setInput: function lexer_setInput(input, yy) {\n        this.yy = yy || this.yy || {}; // also check if we've fully initialized the lexer instance,\n        // including expansion work to be done to go from a loaded\n        // lexer to a usable lexer:\n\n        if (!this.__decompressed) {\n          // step 1: decompress the regex list:\n          var rules = this.rules;\n\n          for (var i = 0, len = rules.length; i < len; i++) {\n            var rule_re = rules[i]; // compression: is the RE an xref to another RE slot in the rules[] table?\n\n            if (typeof rule_re === 'number') {\n              rules[i] = rules[rule_re];\n            }\n          } // step 2: unfold the conditions[] set to make these ready for use:\n\n\n          var conditions = this.conditions;\n\n          for (var k in conditions) {\n            var spec = conditions[k];\n            var rule_ids = spec.rules;\n            var len = rule_ids.length;\n            var rule_regexes = new Array(len + 1); // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! \n\n            var rule_new_ids = new Array(len + 1);\n\n            for (var i = 0; i < len; i++) {\n              var idx = rule_ids[i];\n              var rule_re = rules[idx];\n              rule_regexes[i + 1] = rule_re;\n              rule_new_ids[i + 1] = idx;\n            }\n\n            spec.rules = rule_new_ids;\n            spec.__rule_regexes = rule_regexes;\n            spec.__rule_count = len;\n          }\n\n          this.__decompressed = true;\n        }\n\n        this._input = input || '';\n        this.clear();\n        this._signaled_error_token = false;\n        this.done = false;\n        this.yylineno = 0;\n        this.matched = '';\n        this.conditionStack = ['INITIAL'];\n        this.__currentRuleSet__ = null;\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0,\n          range: [0, 0]\n        };\n        this.offset = 0;\n        return this;\n      },\n\n      /**\n       * edit the remaining input via user-specified callback.\n       * This can be used to forward-adjust the input-to-parse, \n       * e.g. inserting macro expansions and alike in the\n       * input which has yet to be lexed.\n       * The behaviour of this API contrasts the `unput()` et al\n       * APIs as those act on the *consumed* input, while this\n       * one allows one to manipulate the future, without impacting\n       * the current `yyloc` cursor location or any history. \n       * \n       * Use this API to help implement C-preprocessor-like\n       * `#include` statements, etc.\n       * \n       * The provided callback must be synchronous and is\n       * expected to return the edited input (string).\n       *\n       * The `cpsArg` argument value is passed to the callback\n       * as-is.\n       *\n       * `callback` interface: \n       * `function callback(input, cpsArg)`\n       * \n       * - `input` will carry the remaining-input-to-lex string\n       *   from the lexer.\n       * - `cpsArg` is `cpsArg` passed into this API.\n       * \n       * The `this` reference for the callback will be set to\n       * reference this lexer instance so that userland code\n       * in the callback can easily and quickly access any lexer\n       * API. \n       *\n       * When the callback returns a non-string-type falsey value,\n       * we assume the callback did not edit the input and we\n       * will using the input as-is.\n       *\n       * When the callback returns a non-string-type value, it\n       * is converted to a string for lexing via the `\"\" + retval`\n       * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html \n       * -- that way any returned object's `toValue()` and `toString()`\n       * methods will be invoked in a proper/desirable order.)\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {\n        var rv = callback.call(this, this._input, cpsArg);\n\n        if (typeof rv !== 'string') {\n          if (rv) {\n            this._input = '' + rv;\n          } // else: keep `this._input` as is.  \n\n        } else {\n          this._input = rv;\n        }\n\n        return this;\n      },\n\n      /**\n       * consumes and returns one char from the input\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      input: function lexer_input() {\n        if (!this._input) {\n          //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)\n          return null;\n        }\n\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch; // Count the linenumber up when we hit the LF (or a stand-alone CR).\n        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo\n        // and we advance immediately past the LF as well, returning both together as if\n        // it was all a single 'character' only.\n\n        var slice_len = 1;\n        var lines = false;\n\n        if (ch === '\\n') {\n          lines = true;\n        } else if (ch === '\\r') {\n          lines = true;\n          var ch2 = this._input[1];\n\n          if (ch2 === '\\n') {\n            slice_len++;\n            ch += ch2;\n            this.yytext += ch2;\n            this.yyleng++;\n            this.offset++;\n            this.match += ch2;\n            this.matched += ch2;\n            this.yylloc.range[1]++;\n          }\n        }\n\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n        } else {\n          this.yylloc.last_column++;\n        }\n\n        this.yylloc.range[1]++;\n        this._input = this._input.slice(slice_len);\n        return ch;\n      },\n\n      /**\n       * unshifts one char (or an entire string) into the input\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      unput: function lexer_unput(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.yyleng = this.yytext.length;\n        this.offset -= len;\n        this.match = this.match.substr(0, this.match.length - len);\n        this.matched = this.matched.substr(0, this.matched.length - len);\n\n        if (lines.length > 1) {\n          this.yylineno -= lines.length - 1;\n          this.yylloc.last_line = this.yylineno + 1; // Get last entirely matched line into the `pre_lines[]` array's\n          // last index slot; we don't mind when other previously \n          // matched lines end up in the array too. \n\n          var pre = this.match;\n          var pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n\n          if (pre_lines.length === 1) {\n            pre = this.matched;\n            pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n          }\n\n          this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;\n        } else {\n          this.yylloc.last_column -= len;\n        }\n\n        this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;\n        this.done = false;\n        return this;\n      },\n\n      /**\n       * cache matched text and append it on next action\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      more: function lexer_more() {\n        this._more = true;\n        return this;\n      },\n\n      /**\n       * signal the lexer that this rule fails to match the input, so the\n       * next matching rule (regex) should be tested instead.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      reject: function lexer_reject() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          // when the `parseError()` call returns, we MUST ensure that the error is registered.\n          // We accomplish this by signaling an 'error' token to be produced for the current\n          // `.lex()` run.\n          var lineno_msg = '';\n\n          if (this.yylloc) {\n            lineno_msg = ' on line ' + (this.yylineno + 1);\n          }\n\n          var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).', false);\n          this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n        }\n\n        return this;\n      },\n\n      /**\n       * retain first n characters of the match\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      less: function lexer_less(n) {\n        return this.unput(this.match.slice(n));\n      },\n\n      /**\n       * return (part of the) already matched input, i.e. for error\n       * messages.\n       * \n       * Limit the returned string length to `maxSize` (default: 20).\n       * \n       * Limit the returned string to the `maxLines` number of lines of\n       * input (default: 1).\n       * \n       * Negative limit values equal *unlimited*.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      pastInput: function lexer_pastInput(maxSize, maxLines) {\n        var past = this.matched.substring(0, this.matched.length - this.match.length);\n        if (maxSize < 0) maxSize = past.length;else if (!maxSize) maxSize = 20;\n        if (maxLines < 0) maxLines = past.length; // can't ever have more input lines than this! \n        else if (!maxLines) maxLines = 1; // `substr` anticipation: treat \\r\\n as a single character and take a little\n        // more than necessary so that we can still properly check against maxSize\n        // after we've transformed and limited the newLines in here:\n\n        past = past.substr(-maxSize * 2 - 2); // now that we have a significantly reduced string to process, transform the newlines\n        // and chop them, then limit them:\n\n        var a = past.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n        a = a.slice(-maxLines);\n        past = a.join('\\n'); // When, after limiting to maxLines, we still have too much to return,\n        // do add an ellipsis prefix...\n\n        if (past.length > maxSize) {\n          past = '...' + past.substr(-maxSize);\n        }\n\n        return past;\n      },\n\n      /**\n       * return (part of the) upcoming input, i.e. for error messages.\n       * \n       * Limit the returned string length to `maxSize` (default: 20).\n       * \n       * Limit the returned string to the `maxLines` number of lines of input (default: 1).\n       * \n       * Negative limit values equal *unlimited*.\n       *\n       * > ### NOTE ###\n       * >\n       * > *\"upcoming input\"* is defined as the whole of the both\n       * > the *currently lexed* input, together with any remaining input\n       * > following that. *\"currently lexed\"* input is the input \n       * > already recognized by the lexer but not yet returned with\n       * > the lexer token. This happens when you are invoking this API\n       * > from inside any lexer rule action code block. \n       * >\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {\n        var next = this.match;\n        if (maxSize < 0) maxSize = next.length + this._input.length;else if (!maxSize) maxSize = 20;\n        if (maxLines < 0) maxLines = maxSize; // can't ever have more input lines than this! \n        else if (!maxLines) maxLines = 1; // `substring` anticipation: treat \\r\\n as a single character and take a little\n        // more than necessary so that we can still properly check against maxSize\n        // after we've transformed and limited the newLines in here:\n\n        if (next.length < maxSize * 2 + 2) {\n          next += this._input.substring(0, maxSize * 2 + 2); // substring is faster on Chrome/V8 \n        } // now that we have a significantly reduced string to process, transform the newlines\n        // and chop them, then limit them:\n\n\n        var a = next.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n        a = a.slice(0, maxLines);\n        next = a.join('\\n'); // When, after limiting to maxLines, we still have too much to return,\n        // do add an ellipsis postfix...\n\n        if (next.length > maxSize) {\n          next = next.substring(0, maxSize) + '...';\n        }\n\n        return next;\n      },\n\n      /**\n       * return a string which displays the character position where the\n       * lexing error occurred, i.e. for error messages\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {\n        var pre = this.pastInput(maxPrefix).replace(/\\s/g, ' ');\n        var c = new Array(pre.length + 1).join('-');\n        return pre + this.upcomingInput(maxPostfix).replace(/\\s/g, ' ') + '\\n' + c + '^';\n      },\n\n      /**\n       * return an YYLLOC info object derived off the given context (actual, preceding, following, current).\n       * Use this method when the given `actual` location is not guaranteed to exist (i.e. when\n       * it MAY be NULL) and you MUST have a valid location info object anyway:\n       * then we take the given context of the `preceding` and `following` locations, IFF those are available,\n       * and reconstruct the `actual` location info from those.\n       * If this fails, the heuristic is to take the `current` location, IFF available.\n       * If this fails as well, we assume the sought location is at/around the current lexer position\n       * and then produce that one as a response. DO NOTE that these heuristic/derived location info\n       * values MAY be inaccurate!\n       *\n       * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just\n       * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {\n        var loc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0,\n          range: [0, 0]\n        };\n\n        if (actual) {\n          loc.first_line = actual.first_line | 0;\n          loc.last_line = actual.last_line | 0;\n          loc.first_column = actual.first_column | 0;\n          loc.last_column = actual.last_column | 0;\n\n          if (actual.range) {\n            loc.range[0] = actual.range[0] | 0;\n            loc.range[1] = actual.range[1] | 0;\n          }\n        }\n\n        if (loc.first_line <= 0 || loc.last_line < loc.first_line) {\n          // plan B: heuristic using preceding and following:\n          if (loc.first_line <= 0 && preceding) {\n            loc.first_line = preceding.last_line | 0;\n            loc.first_column = preceding.last_column | 0;\n\n            if (preceding.range) {\n              loc.range[0] = actual.range[1] | 0;\n            }\n          }\n\n          if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {\n            loc.last_line = following.first_line | 0;\n            loc.last_column = following.first_column | 0;\n\n            if (following.range) {\n              loc.range[1] = actual.range[0] | 0;\n            }\n          } // plan C?: see if the 'current' location is useful/sane too:\n\n\n          if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {\n            loc.first_line = current.first_line | 0;\n            loc.first_column = current.first_column | 0;\n\n            if (current.range) {\n              loc.range[0] = current.range[0] | 0;\n            }\n          }\n\n          if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {\n            loc.last_line = current.last_line | 0;\n            loc.last_column = current.last_column | 0;\n\n            if (current.range) {\n              loc.range[1] = current.range[1] | 0;\n            }\n          }\n        } // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter\n        // or plan D heuristics to produce a 'sensible' last_line value:\n\n\n        if (loc.last_line <= 0) {\n          if (loc.first_line <= 0) {\n            loc.first_line = this.yylloc.first_line;\n            loc.last_line = this.yylloc.last_line;\n            loc.first_column = this.yylloc.first_column;\n            loc.last_column = this.yylloc.last_column;\n            loc.range[0] = this.yylloc.range[0];\n            loc.range[1] = this.yylloc.range[1];\n          } else {\n            loc.last_line = this.yylloc.last_line;\n            loc.last_column = this.yylloc.last_column;\n            loc.range[1] = this.yylloc.range[1];\n          }\n        }\n\n        if (loc.first_line <= 0) {\n          loc.first_line = loc.last_line;\n          loc.first_column = 0; // loc.last_column; \n\n          loc.range[1] = loc.range[0];\n        }\n\n        if (loc.first_column < 0) {\n          loc.first_column = 0;\n        }\n\n        if (loc.last_column < 0) {\n          loc.last_column = loc.first_column > 0 ? loc.first_column : 80;\n        }\n\n        return loc;\n      },\n\n      /**\n       * return a string which displays the lines & columns of input which are referenced \n       * by the given location info range, plus a few lines of context.\n       * \n       * This function pretty-prints the indicated section of the input, with line numbers \n       * and everything!\n       * \n       * This function is very useful to provide highly readable error reports, while\n       * the location range may be specified in various flexible ways:\n       * \n       * - `loc` is the location info object which references the area which should be\n       *   displayed and 'marked up': these lines & columns of text are marked up by `^`\n       *   characters below each character in the entire input range.\n       * \n       * - `context_loc` is the *optional* location info object which instructs this\n       *   pretty-printer how much *leading* context should be displayed alongside\n       *   the area referenced by `loc`. This can help provide context for the displayed\n       *   error, etc.\n       * \n       *   When this location info is not provided, a default context of 3 lines is\n       *   used.\n       * \n       * - `context_loc2` is another *optional* location info object, which serves\n       *   a similar purpose to `context_loc`: it specifies the amount of *trailing*\n       *   context lines to display in the pretty-print output.\n       * \n       *   When this location info is not provided, a default context of 1 line only is\n       *   used.\n       * \n       * Special Notes:\n       * \n       * - when the `loc`-indicated range is very large (about 5 lines or more), then\n       *   only the first and last few lines of this block are printed while a\n       *   `...continued...` message will be printed between them.\n       * \n       *   This serves the purpose of not printing a huge amount of text when the `loc`\n       *   range happens to be huge: this way a manageable & readable output results\n       *   for arbitrary large ranges.\n       * \n       * - this function can display lines of input which whave not yet been lexed.\n       *   `prettyPrintRange()` can access the entire input!\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {\n        loc = this.deriveLocationInfo(loc, context_loc, context_loc2);\n        const CONTEXT = 3;\n        const CONTEXT_TAIL = 1;\n        const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;\n        var input = this.matched + this._input;\n        var lines = input.split('\\n');\n        var l0 = Math.max(1, context_loc ? context_loc.first_line : loc.first_line - CONTEXT);\n        var l1 = Math.max(1, context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL);\n        var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;\n        var ws_prefix = new Array(lineno_display_width).join(' ');\n        var nonempty_line_indexes = [];\n        var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {\n          var lno = index + l0;\n          var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);\n          var rv = lno_pfx + ': ' + line;\n          var errpfx = new Array(lineno_display_width + 1).join('^');\n          var offset = 2 + 1;\n          var len = 0;\n\n          if (lno === loc.first_line) {\n            offset += loc.first_column;\n            len = Math.max(2, (lno === loc.last_line ? loc.last_column : line.length) - loc.first_column + 1);\n          } else if (lno === loc.last_line) {\n            len = Math.max(2, loc.last_column + 1);\n          } else if (lno > loc.first_line && lno < loc.last_line) {\n            len = Math.max(2, line.length + 1);\n          }\n\n          if (len) {\n            var lead = new Array(offset).join('.');\n            var mark = new Array(len).join('^');\n            rv += '\\n' + errpfx + lead + mark;\n\n            if (line.trim().length > 0) {\n              nonempty_line_indexes.push(index);\n            }\n          }\n\n          rv = rv.replace(/\\t/g, ' ');\n          return rv;\n        }); // now make sure we don't print an overly large amount of error area: limit it \n        // to the top and bottom line count:\n\n        if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {\n          var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;\n          var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;\n          var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';\n          intermediate_line += '\\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';\n          rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);\n        }\n\n        return rv.join('\\n');\n      },\n\n      /**\n       * helper function, used to produce a human readable description as a string, given\n       * the input `yylloc` location object.\n       * \n       * Set `display_range_too` to TRUE to include the string character index position(s)\n       * in the description if the `yylloc.range` is available.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {\n        var l1 = yylloc.first_line;\n        var l2 = yylloc.last_line;\n        var c1 = yylloc.first_column;\n        var c2 = yylloc.last_column;\n        var dl = l2 - l1;\n        var dc = c2 - c1;\n        var rv;\n\n        if (dl === 0) {\n          rv = 'line ' + l1 + ', ';\n\n          if (dc <= 1) {\n            rv += 'column ' + c1;\n          } else {\n            rv += 'columns ' + c1 + ' .. ' + c2;\n          }\n        } else {\n          rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';\n        }\n\n        if (yylloc.range && display_range_too) {\n          var r1 = yylloc.range[0];\n          var r2 = yylloc.range[1] - 1;\n\n          if (r2 <= r1) {\n            rv += ' {String Offset: ' + r1 + '}';\n          } else {\n            rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';\n          }\n        }\n\n        return rv;\n      },\n\n      /**\n       * test the lexed token: return FALSE when not a match, otherwise return token.\n       * \n       * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`\n       * contains the actually matched text string.\n       * \n       * Also move the input cursor forward and update the match collectors:\n       * \n       * - `yytext`\n       * - `yyleng`\n       * - `match`\n       * - `matches`\n       * - `yylloc`\n       * - `offset`\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      test_match: function lexer_test_match(match, indexed_rule) {\n        var token, lines, backup, match_str, match_str_len;\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.yylloc.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column,\n              range: this.yylloc.range.slice(0)\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            //_signaled_error_token: this._signaled_error_token,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n        }\n\n        match_str = match[0];\n        match_str_len = match_str.length; // if (match_str.indexOf('\\n') !== -1 || match_str.indexOf('\\r') !== -1) {\n\n        lines = match_str.split(/(?:\\r\\n?|\\n)/g);\n\n        if (lines.length > 1) {\n          this.yylineno += lines.length - 1;\n          this.yylloc.last_line = this.yylineno + 1;\n          this.yylloc.last_column = lines[lines.length - 1].length;\n        } else {\n          this.yylloc.last_column += match_str_len;\n        } // }\n\n\n        this.yytext += match_str;\n        this.match += match_str;\n        this.matched += match_str;\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        this.yylloc.range[1] += match_str_len; // previous lex rules MAY have invoked the `more()` API rather than producing a token:\n        // those rules will already have moved this `offset` forward matching their match lengths,\n        // hence we must only add our own match length now:\n\n        this.offset += match_str_len;\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match_str_len); // calling this method:\n        //\n        //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}\n\n        token = this.performAction.call(this, this.yy, indexed_rule, this.conditionStack[this.conditionStack.length - 1]\n        /* = YY_START */\n        ); // otherwise, when the action codes are all simple return token statements:\n        //token = this.simpleCaseActionClusters[indexed_rule];\n\n        if (this.done && this._input) {\n          this.done = false;\n        }\n\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n\n          this.__currentRuleSet__ = null;\n          return false; // rule action called reject() implying the next rule should be tested instead. \n        } else if (this._signaled_error_token) {\n          // produce one 'error' token as `.parseError()` in `reject()`\n          // did not guarantee a failure signal by throwing an exception!\n          token = this._signaled_error_token;\n          this._signaled_error_token = false;\n          return token;\n        }\n\n        return false;\n      },\n\n      /**\n       * return next match in input\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      next: function lexer_next() {\n        if (this.done) {\n          this.clear();\n          return this.EOF;\n        }\n\n        if (!this._input) {\n          this.done = true;\n        }\n\n        var token, match, tempMatch, index;\n\n        if (!this._more) {\n          this.clear();\n        }\n\n        var spec = this.__currentRuleSet__;\n\n        if (!spec) {\n          // Update the ruleset cache as we apparently encountered a state change or just started lexing.\n          // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will\n          // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps\n          // speed up those activities a tiny bit.\n          spec = this.__currentRuleSet__ = this._currentRules(); // Check whether a *sane* condition has been pushed before: this makes the lexer robust against\n          // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19\n\n          if (!spec || !spec.rules) {\n            var lineno_msg = '';\n\n            if (this.options.trackPosition) {\n              lineno_msg = ' on line ' + (this.yylineno + 1);\n            }\n\n            var p = this.constructLexErrorInfo('Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name \"' + this.topState() + '\"; this is a fatal error and should be reported to the application programmer team!', false); // produce one 'error' token until this situation has been resolved, most probably by parse termination!\n\n            return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n          }\n        }\n\n        var rule_ids = spec.rules;\n        var regexes = spec.__rule_regexes;\n        var len = spec.__rule_count; // Note: the arrays are 1-based, while `len` itself is a valid index,\n        // hence the non-standard less-or-equal check in the next loop condition!\n\n        for (var i = 1; i <= len; i++) {\n          tempMatch = this._input.match(regexes[i]);\n\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rule_ids[i]);\n\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = undefined;\n                continue; // rule action called reject() implying a rule MISmatch. \n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n\n        if (match) {\n          token = this.test_match(match, rule_ids[index]);\n\n          if (token !== false) {\n            return token;\n          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n          return false;\n        }\n\n        if (!this._input) {\n          this.done = true;\n          this.clear();\n          return this.EOF;\n        } else {\n          var lineno_msg = '';\n\n          if (this.options.trackPosition) {\n            lineno_msg = ' on line ' + (this.yylineno + 1);\n          }\n\n          var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': Unrecognized text.', this.options.lexerErrorsAreRecoverable);\n          var pendingInput = this._input;\n          var activeCondition = this.topState();\n          var conditionStackDepth = this.conditionStack.length;\n          token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n\n          if (token === this.ERROR) {\n            // we can try to recover from a lexer error that `parseError()` did not 'recover' for us\n            // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`\n            // has not consumed/modified any pending input or changed state in the error handler:\n            if (!this.matches && // and make sure the input has been modified/consumed ...\n            pendingInput === this._input && // ...or the lexer state has been modified significantly enough\n            // to merit a non-consuming error handling action right now.\n            activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {\n              this.input();\n            }\n          }\n\n          return token;\n        }\n      },\n\n      /**\n       * return next match that has a token\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      lex: function lexer_lex() {\n        var r; // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:\n\n        if (typeof this.pre_lex === 'function') {\n          r = this.pre_lex.call(this, 0);\n        }\n\n        if (typeof this.options.pre_lex === 'function') {\n          // (also account for a userdef function which does not return any value: keep the token as is)\n          r = this.options.pre_lex.call(this, r) || r;\n        }\n\n        if (this.yy && typeof this.yy.pre_lex === 'function') {\n          // (also account for a userdef function which does not return any value: keep the token as is)\n          r = this.yy.pre_lex.call(this, r) || r;\n        }\n\n        while (!r) {\n          r = this.next();\n        }\n\n        if (this.yy && typeof this.yy.post_lex === 'function') {\n          // (also account for a userdef function which does not return any value: keep the token as is)\n          r = this.yy.post_lex.call(this, r) || r;\n        }\n\n        if (typeof this.options.post_lex === 'function') {\n          // (also account for a userdef function which does not return any value: keep the token as is)\n          r = this.options.post_lex.call(this, r) || r;\n        }\n\n        if (typeof this.post_lex === 'function') {\n          // (also account for a userdef function which does not return any value: keep the token as is)\n          r = this.post_lex.call(this, r) || r;\n        }\n\n        return r;\n      },\n\n      /**\n       * return next match that has a token. Identical to the `lex()` API but does not invoke any of the \n       * `pre_lex()` nor any of the `post_lex()` callbacks.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      fastLex: function lexer_fastLex() {\n        var r;\n\n        while (!r) {\n          r = this.next();\n        }\n\n        return r;\n      },\n\n      /**\n       * return info about the lexer state that can help a parser or other lexer API user to use the\n       * most efficient means available. This API is provided to aid run-time performance for larger\n       * systems which employ this lexer.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      canIUse: function lexer_canIUse() {\n        var rv = {\n          fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'\n        };\n        return rv;\n      },\n\n      /**\n       * backwards compatible alias for `pushState()`;\n       * the latter is symmetrical with `popState()` and we advise to use\n       * those APIs in any modern lexer code, rather than `begin()`.\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      begin: function lexer_begin(condition) {\n        return this.pushState(condition);\n      },\n\n      /**\n       * activates a new lexer condition state (pushes the new lexer\n       * condition state onto the condition stack)\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      pushState: function lexer_pushState(condition) {\n        this.conditionStack.push(condition);\n        this.__currentRuleSet__ = null;\n        return this;\n      },\n\n      /**\n       * pop the previously active lexer condition state off the condition\n       * stack\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      popState: function lexer_popState() {\n        var n = this.conditionStack.length - 1;\n\n        if (n > 0) {\n          this.__currentRuleSet__ = null;\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n\n      /**\n       * return the currently active lexer condition state; when an index\n       * argument is provided it produces the N-th previous condition state,\n       * if available\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      topState: function lexer_topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return 'INITIAL';\n        }\n      },\n\n      /**\n       * (internal) determine the lexer rule set which is active for the\n       * currently active lexer condition state\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      _currentRules: function lexer__currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]];\n        } else {\n          return this.conditions['INITIAL'];\n        }\n      },\n\n      /**\n       * return the number of states currently on the stack\n       * \n       * @public\n       * @this {RegExpLexer}\n       */\n      stateStackSize: function lexer_stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {\n        trackPosition: true\n      },\n      JisonLexerError: JisonLexerError,\n      performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {\n        var yy_ = this;\n        var YYSTATE = YY_START;\n\n        switch (yyrulenumber) {\n          case 1:\n            /*! Conditions:: INITIAL */\n\n            /*! Rule::       \\s+ */\n\n            /* skip whitespace */\n            break;\n\n          default:\n            return this.simpleCaseActionClusters[yyrulenumber];\n        }\n      },\n      simpleCaseActionClusters: {\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       (--[0-9a-z-A-Z-]*) */\n        0: 13,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       \\* */\n        2: 5,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       \\/ */\n        3: 6,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       \\+ */\n        4: 3,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       - */\n        5: 4,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)px\\b */\n        6: 15,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)cm\\b */\n        7: 15,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)mm\\b */\n        8: 15,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)in\\b */\n        9: 15,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)pt\\b */\n        10: 15,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)pc\\b */\n        11: 15,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)deg\\b */\n        12: 16,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)grad\\b */\n        13: 16,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)rad\\b */\n        14: 16,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)turn\\b */\n        15: 16,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)s\\b */\n        16: 17,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ms\\b */\n        17: 17,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)Hz\\b */\n        18: 18,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)kHz\\b */\n        19: 18,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dpi\\b */\n        20: 19,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dpcm\\b */\n        21: 19,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dppx\\b */\n        22: 19,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)em\\b */\n        23: 20,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ex\\b */\n        24: 21,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ch\\b */\n        25: 22,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)rem\\b */\n        26: 23,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vw\\b */\n        27: 25,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vh\\b */\n        28: 24,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vmin\\b */\n        29: 26,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vmax\\b */\n        30: 27,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)% */\n        31: 28,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)\\b */\n        32: 11,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       (calc) */\n        33: 9,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       (var) */\n        34: 12,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       ([a-z]+) */\n        35: 10,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       \\( */\n        36: 7,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       \\) */\n        37: 8,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       , */\n        38: 14,\n\n        /*! Conditions:: INITIAL */\n\n        /*! Rule::       $ */\n        39: 1\n      },\n      rules: [\n      /*  0: */\n      /^(?:(--[\\d\\-A-Za-z]*))/,\n      /*  1: */\n      /^(?:\\s+)/,\n      /*  2: */\n      /^(?:\\*)/,\n      /*  3: */\n      /^(?:\\/)/,\n      /*  4: */\n      /^(?:\\+)/,\n      /*  5: */\n      /^(?:-)/,\n      /*  6: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)px\\b)/,\n      /*  7: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)cm\\b)/,\n      /*  8: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)mm\\b)/,\n      /*  9: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)in\\b)/,\n      /* 10: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)pt\\b)/,\n      /* 11: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)pc\\b)/,\n      /* 12: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)deg\\b)/,\n      /* 13: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)grad\\b)/,\n      /* 14: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)rad\\b)/,\n      /* 15: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)turn\\b)/,\n      /* 16: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)s\\b)/,\n      /* 17: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ms\\b)/,\n      /* 18: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)Hz\\b)/,\n      /* 19: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)kHz\\b)/,\n      /* 20: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dpi\\b)/,\n      /* 21: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dpcm\\b)/,\n      /* 22: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dppx\\b)/,\n      /* 23: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)em\\b)/,\n      /* 24: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ex\\b)/,\n      /* 25: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ch\\b)/,\n      /* 26: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)rem\\b)/,\n      /* 27: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vw\\b)/,\n      /* 28: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vh\\b)/,\n      /* 29: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vmin\\b)/,\n      /* 30: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vmax\\b)/,\n      /* 31: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)%)/,\n      /* 32: */\n      /^(?:(\\d+(\\.\\d*)?|\\.\\d+)\\b)/,\n      /* 33: */\n      /^(?:(calc))/,\n      /* 34: */\n      /^(?:(var))/,\n      /* 35: */\n      /^(?:([a-z]+))/,\n      /* 36: */\n      /^(?:\\()/,\n      /* 37: */\n      /^(?:\\))/,\n      /* 38: */\n      /^(?:,)/,\n      /* 39: */\n      /^(?:$)/],\n      conditions: {\n        'INITIAL': {\n          rules: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n          inclusive: true\n        }\n      }\n    };\n    return lexer;\n  }();\n\n  parser.lexer = lexer;\n\n  function Parser() {\n    this.yy = {};\n  }\n\n  Parser.prototype = parser;\n  parser.Parser = Parser;\n  return new Parser();\n}();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = parser;\n  exports.Parser = parser.Parser;\n\n  exports.parse = function () {\n    return parser.parse.apply(parser, arguments);\n  };\n}","map":{"version":3,"sources":["/Users/bermed28/Desktop/booking-system-stackoverflowers-studios/frontend/node_modules/reduce-css-calc/dist/parser.js"],"names":["parser","JisonParserError","msg","hash","Object","defineProperty","enumerable","writable","value","stacktrace","exception","Error","ex2","message","stack","hasOwnProperty","captureStackTrace","constructor","setPrototypeOf","prototype","create","name","bp","s","rv","p","pop","r","rule","i","l","length","push","bda","d","idx","g","goto","j","bt","len","y","symbol","t","type","a","state","m","mode","n","q","z","shift","c","u","e","apply","trace","no_op_trace","yy","options","hasPartialLrUpgradeOnConflict","errorRecoveryTokenDiscardCount","symbols_","terminals_","TERROR","EOF","originalQuoteName","originalParseError","cleanupAfterParse","constructParseErrorInfo","yyMergeLocationInfo","__reentrant_call_depth","__error_infos","__error_recovery_infos","quoteName","parser_quoteName","id_str","getSymbolName","parser_getSymbolName","key","describeSymbol","parser_describeSymbol","terminal_descriptions_","id","collect_expected_token_set","parser_collect_expected_token_set","do_not_describe","tokenset","check","state_descriptions_","table","productions_","performAction","parser__PerformAction","yystate","yysp","yyvstack","yyparser","yylexer","lexer","$","operator","left","right","prefix","parseFloat","fallback","unit","exec","prev","defaultActions","parseError","str","ExceptionClass","recoverable","destroy","parse","input","self","Array","sstack","vstack","sp","ERROR_RECOVERY_TOKEN_DISCARD_COUNT","NO_ACTION","__lexer__","sharedState_yy","undefined","pre_parse","post_parse","pre_lex","post_lex","ASSERT","assert","JisonAssert","cond","yyGetSharedState","shallow_copy_noclobber","dst","src","k","call","parseErrorAlt","quoteNameAlt","parser_cleanupAfterParse","resultValue","invoke_post_methods","do_not_nuke_errorinfos","cleanupAfterLex","el","parser_constructParseErrorInfo","ex","expected","pei","errStr","text","match","yytext","token","token_id","line","yylineno","action","new_state","newState","symbol_stack","state_stack","value_stack","stack_pointer","destructParseErrorInfo","rec","getNonTerminalFromCode","tokenName","stdLex","lex","fastLex","yyval","_$","yyrulelen","this_production","retval","setInput","canIUse","lexerInfo","errSymbolDescr","showPosition","join","ntsymbol","JisonLexerError","ERROR","__currentRuleSet__","__decompressed","done","_backtrack","_input","_more","_signaled_error_token","conditionStack","matched","matches","offset","yyleng","yylloc","constructLexErrorInfo","lexer_constructLexErrorInfo","show_input_position","indexOf","prettyPrintRange","pretty_src","test","pos_str","loc","destructLexErrorInfo","lexer_parseError","yyerror","yyError","lineno_msg","lexerErrorsAreRecoverable","args","slice","arguments","extra_error_attributes","lexer_cleanupAfterLex","clear","lexer_clear","col","last_column","first_line","first_column","last_line","range","lexer_setInput","rules","rule_re","conditions","spec","rule_ids","rule_regexes","rule_new_ids","__rule_regexes","__rule_count","editRemainingInput","lexer_editRemainingInput","callback","cpsArg","lexer_input","ch","slice_len","lines","ch2","unput","lexer_unput","split","substr","pre","pre_lines","more","lexer_more","reject","lexer_reject","backtrack_lexer","less","lexer_less","pastInput","lexer_pastInput","maxSize","maxLines","past","substring","replace","upcomingInput","lexer_upcomingInput","next","lexer_showPosition","maxPrefix","maxPostfix","deriveLocationInfo","lexer_deriveYYLLOC","actual","preceding","following","current","lexer_prettyPrintRange","context_loc","context_loc2","CONTEXT","CONTEXT_TAIL","MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT","l0","Math","max","l1","lineno_display_width","log10","ws_prefix","nonempty_line_indexes","map","injectLineNumber","index","lno","lno_pfx","errpfx","lead","mark","trim","clip_start","clip_end","intermediate_line","splice","describeYYLLOC","lexer_describe_yylloc","display_range_too","l2","c1","c2","dl","dc","r1","r2","test_match","lexer_test_match","indexed_rule","backup","match_str","match_str_len","lexer_next","tempMatch","_currentRules","trackPosition","topState","regexes","flex","pendingInput","activeCondition","conditionStackDepth","lexer_lex","lexer_fastLex","lexer_canIUse","begin","lexer_begin","condition","pushState","lexer_pushState","popState","lexer_popState","lexer_topState","abs","lexer__currentRules","stateStackSize","lexer_stateStackSize","lexer__performAction","yyrulenumber","YY_START","yy_","YYSTATE","simpleCaseActionClusters","inclusive","Parser","require","exports"],"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","sourcesContent":["\n/* parser generated by jison 0.6.1-215 */\n\n/*\n * Returns a Parser object of the following structure:\n *\n *  Parser: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a derivative/copy of this one,\n *               not a direct reference!\n *  }\n *\n *  Parser.prototype: {\n *    yy: {},\n *    EOF: 1,\n *    TERROR: 2,\n *\n *    trace: function(errorMessage, ...),\n *\n *    JisonParserError: function(msg, hash),\n *\n *    quoteName: function(name),\n *               Helper function which can be overridden by user code later on: put suitable\n *               quotes around literal IDs in a description string.\n *\n *    originalQuoteName: function(name),\n *               The basic quoteName handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function\n *               at the end of the `parse()`.\n *\n *    describeSymbol: function(symbol),\n *               Return a more-or-less human-readable description of the given symbol, when\n *               available, or the symbol itself, serving as its own 'description' for lack\n *               of something better to serve up.\n *\n *               Return NULL when the symbol is unknown to the parser.\n *\n *    symbols_: {associative list: name ==> number},\n *    terminals_: {associative list: number ==> name},\n *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},\n *    terminal_descriptions_: (if there are any) {associative list: number ==> description},\n *    productions_: [...],\n *\n *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)\n *                             to store/reference the rule value `$$` and location info `@$`.\n *\n *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets\n *                 to see the same object via the `this` reference, i.e. if you wish to carry custom\n *                 data from one reduce action through to the next within a single parse run, then you\n *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.\n *\n *                 `this.yy` is a direct reference to the `yy` shared state object.\n *\n *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`\n *                 object at `parse()` start and are therefore available to the action code via the\n *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from\n *                 the %parse-param` list.\n *\n *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used\n *                             to match this rule. This is *not* the look-ahead token, but the last token\n *                             that's actually part of this rule.\n *\n *                 Formulated another way, `yytext` is the value of the token immediately preceeding\n *                 the current look-ahead token.\n *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.\n *\n *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.\n *\n *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.\n *\n *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.\n *\n *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead\n *                               of an empty object when no suitable location info can be provided.\n *\n *               - `yystate` : the current parser state number, used internally for dispatching and\n *                               executing the action code chunk matching the rule currently being reduced.\n *\n *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *                 Also note that you can access this and other stack index values using the new double-hash\n *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things\n *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.\n *                 This is made available to write very advanced grammar action rules, e.g. when you want\n *                 to investigate the parse state stack in your action code, which would, for example,\n *                 be relevant when you wish to implement error diagnostics and reporting schemes similar\n *                 to the work described here:\n *\n *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.\n *                   In Journées Francophones des Languages Applicatifs.\n *\n *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.\n *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.\n *\n *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.\n *                             constructs.\n *\n *               - `yylstack`: reference to the parser token location stack. Also accessed via\n *                             the `@1` etc. constructs.\n *\n *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are\n *                             UNDEFINED rather than an empty (location) object, when the lexer/parser\n *                             action code did not provide a suitable location info object when such a\n *                             slot was filled!\n *\n *               - `yystack` : reference to the parser token id stack. Also accessed via the\n *                             `#1` etc. constructs.\n *\n *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to\n *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might\n *                 want access this array for your own purposes, such as error analysis as mentioned above!\n *\n *                 Note that this stack stores the current stack of *tokens*, that is the sequence of\n *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*\n *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and\n *                 *reduced*.\n *\n *               - `yysstack`: reference to the parser state stack. This one carries the internal parser\n *                             *states* such as the one in `yystate`, which are used to represent\n *                             the parser state machine in the *parse table*. *Very* *internal* stuff,\n *                             what can I say? If you access this one, you're clearly doing wicked things\n *\n *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your\n *                             grammar definition file.\n *\n *    table: [...],\n *               State transition table\n *               ----------------------\n *\n *               index levels are:\n *               - `state`  --> hash table\n *               - `symbol` --> action (number or array)\n *\n *                 If the `action` is an array, these are the elements' meaning:\n *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept\n *                 - index [1]: GOTO `state`\n *\n *                 If the `action` is a number, it is the GOTO `state`\n *\n *    defaultActions: {...},\n *\n *    parseError: function(str, hash, ExceptionClass),\n *    yyError: function(str, ...),\n *    yyRecovering: function(),\n *    yyErrOk: function(),\n *    yyClearIn: function(),\n *\n *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this parser kernel in many places; example usage:\n *\n *                   var infoObj = parser.constructParseErrorInfo('fail!', null,\n *                                     parser.collect_expected_token_set(state), true);\n *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);\n *\n *    originalParseError: function(str, hash, ExceptionClass),\n *               The basic `parseError` handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function\n *               at the end of the `parse()`.\n *\n *    options: { ... parser %options ... },\n *\n *    parse: function(input[, args...]),\n *               Parse the given `input` and return the parsed value (or `true` when none was provided by\n *               the root action, in which case the parser is acting as a *matcher*).\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the jison run-time;\n *               when such a collision is detected an exception is thrown to prevent the generated run-time\n *               from silently accepting this confusing and potentially hazardous situation!\n *\n *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in\n *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state\n *               object and any collision with those will be reported by the lexer via a thrown exception.\n *\n *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown\n *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY\n *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and\n *               the internal parser gets properly garbage collected under these particular circumstances.\n *\n *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API can be invoked to calculate a spanning `yylloc` location info object.\n *\n *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case\n *               this function will attempt to obtain a suitable location marker by inspecting the location stack\n *               backwards.\n *\n *               For more info see the documentation comment further below, immediately above this function's\n *               implementation.\n *\n *    lexer: {\n *        yy: {...},           A reference to the so-called \"shared state\" `yy` once\n *                             received via a call to the `.setInput(input, yy)` lexer API.\n *        EOF: 1,\n *        ERROR: 2,\n *        JisonLexerError: function(msg, hash),\n *        parseError: function(str, hash, ExceptionClass),\n *        setInput: function(input, [yy]),\n *        input: function(),\n *        unput: function(str),\n *        more: function(),\n *        reject: function(),\n *        less: function(n),\n *        pastInput: function(n),\n *        upcomingInput: function(n),\n *        showPosition: function(),\n *        test_match: function(regex_match_array, rule_index, ...),\n *        next: function(...),\n *        lex: function(...),\n *        begin: function(condition),\n *        pushState: function(condition),\n *        popState: function(),\n *        topState: function(),\n *        _currentRules: function(),\n *        stateStackSize: function(),\n *        cleanupAfterLex: function()\n *\n *        options: { ... lexer %options ... },\n *\n *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),\n *        rules: [...],\n *        conditions: {associative list: name ==> set},\n *    }\n *  }\n *\n *\n *  token location info (@$, _$, etc.): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer and\n * parser errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *  }\n *\n * parser (grammar) errors will also provide these additional members:\n *\n *  {\n *    expected:    (array describing the set of expected tokens;\n *                  may be UNDEFINED when we cannot easily produce such a set)\n *    state:       (integer (or array when the table includes grammar collisions);\n *                  represents the current internal state of the parser kernel.\n *                  can, for example, be used to pass to the `collect_expected_token_set()`\n *                  API to obtain the expected token set)\n *    action:      (integer; represents the current internal action which will be executed)\n *    new_state:   (integer; represents the next/planned internal state, once the current\n *                  action has executed)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *    parser:      (reference to the current parser instance)\n *  }\n *\n * while `this` will reference the current parser instance.\n *\n * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    lexer:       (reference to the current lexer instance which reported the error)\n *  }\n *\n * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired\n * from either the parser or lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    exception:   (reference to the exception thrown)\n *  }\n *\n * Please do note that in the latter situation, the `expected` field will be omitted as\n * this type of failure is assumed not to be due to *parse errors* but rather due to user\n * action code in either parser or lexer failing unexpectedly.\n *\n * ---\n *\n * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.\n * These options are available:\n *\n * ### options which are global for all parser instances\n *\n *  Parser.pre_parse: function(yy)\n *                 optional: you can specify a pre_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`.\n *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: you can specify a post_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`. When it does not return any value,\n *                 the parser will return the original `retval`.\n *\n * ### options which can be set up per parser instance\n *\n *  yy: {\n *      pre_parse:  function(yy)\n *                 optional: is invoked before the parse cycle starts (and before the first\n *                 invocation of `lex()`) but immediately after the invocation of\n *                 `parser.pre_parse()`).\n *      post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: is invoked when the parse terminates due to success ('accept')\n *                 or failure (even when exceptions are thrown).\n *                 `retval` contains the return value to be produced by `Parser.parse()`;\n *                 this function can override the return value by returning another.\n *                 When it does not return any value, the parser will return the original\n *                 `retval`.\n *                 This function is invoked immediately before `parser.post_parse()`.\n *\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *      quoteName: function(name),\n *                 optional: overrides the default `quoteName` function.\n *  }\n *\n *  parser.lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\n\n        \n    \n            var parser = (function () {\n\n\n// See also:\n// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n// with userland code which might access the derived class in a 'classic' way.\nfunction JisonParserError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n        enumerable: false,\n        writable: false,\n        value: 'JisonParserError'\n    });\n\n    if (msg == null) msg = '???';\n\n    Object.defineProperty(this, 'message', {\n        enumerable: false,\n        writable: true,\n        value: msg\n    });\n\n    this.hash = hash;\n\n    var stacktrace;\n    if (hash && hash.exception instanceof Error) {\n        var ex2 = hash.exception;\n        this.message = ex2.message || msg;\n        stacktrace = ex2.stack;\n    }\n    if (!stacktrace) {\n        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            stacktrace = (new Error(msg)).stack;\n        }\n    }\n    if (stacktrace) {\n        Object.defineProperty(this, 'stack', {\n            enumerable: false,\n            writable: false,\n            value: stacktrace\n        });\n    }\n}\n\nif (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);\n} else {\n    JisonParserError.prototype = Object.create(Error.prototype);\n}\nJisonParserError.prototype.constructor = JisonParserError;\nJisonParserError.prototype.name = 'JisonParserError';\n\n\n\n\n        // helper: reconstruct the productions[] table\n        function bp(s) {\n            var rv = [];\n            var p = s.pop;\n            var r = s.rule;\n            for (var i = 0, l = p.length; i < l; i++) {\n                rv.push([\n                    p[i],\n                    r[i]\n                ]);\n            }\n            return rv;\n        }\n    \n\n\n        // helper: reconstruct the defaultActions[] table\n        function bda(s) {\n            var rv = {};\n            var d = s.idx;\n            var g = s.goto;\n            for (var i = 0, l = d.length; i < l; i++) {\n                var j = d[i];\n                rv[j] = g[i];\n            }\n            return rv;\n        }\n    \n\n\n        // helper: reconstruct the 'goto' table\n        function bt(s) {\n            var rv = [];\n            var d = s.len;\n            var y = s.symbol;\n            var t = s.type;\n            var a = s.state;\n            var m = s.mode;\n            var g = s.goto;\n            for (var i = 0, l = d.length; i < l; i++) {\n                var n = d[i];\n                var q = {};\n                for (var j = 0; j < n; j++) {\n                    var z = y.shift();\n                    switch (t.shift()) {\n                    case 2:\n                        q[z] = [\n                            m.shift(),\n                            g.shift()\n                        ];\n                        break;\n\n                    case 0:\n                        q[z] = a.shift();\n                        break;\n\n                    default:\n                        // type === 1: accept\n                        q[z] = [\n                            3\n                        ];\n                    }\n                }\n                rv.push(q);\n            }\n            return rv;\n        }\n    \n\n\n        // helper: runlength encoding with increment step: code, length: step (default step = 0)\n        // `this` references an array\n        function s(c, l, a) {\n            a = a || 0;\n            for (var i = 0; i < l; i++) {\n                this.push(c);\n                c += a;\n            }\n        }\n\n        // helper: duplicate sequence from *relative* offset and length.\n        // `this` references an array\n        function c(i, l) {\n            i = this.length - i;\n            for (l += i; i < l; i++) {\n                this.push(this[i]);\n            }\n        }\n\n        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.\n        function u(a) {\n            var rv = [];\n            for (var i = 0, l = a.length; i < l; i++) {\n                var e = a[i];\n                // Is this entry a helper function?\n                if (typeof e === 'function') {\n                    i++;\n                    e.apply(rv, a[i]);\n                } else {\n                    rv.push(e);\n                }\n            }\n            return rv;\n        }\n    \n\nvar parser = {\n    // Code Generator Information Report\n    // ---------------------------------\n    //\n    // Options:\n    //\n    //   default action mode: ............. [\"classic\",\"merge\"]\n    //   test-compile action mode: ........ \"parser:*,lexer:*\"\n    //   try..catch: ...................... true\n    //   default resolve on conflict: ..... true\n    //   on-demand look-ahead: ............ false\n    //   error recovery token skip maximum: 3\n    //   yyerror in parse actions is: ..... NOT recoverable,\n    //   yyerror in lexer actions and other non-fatal lexer are:\n    //   .................................. NOT recoverable,\n    //   debug grammar/output: ............ false\n    //   has partial LR conflict upgrade:   true\n    //   rudimentary token-stack support:   false\n    //   parser table compression mode: ... 2\n    //   export debug tables: ............. false\n    //   export *all* tables: ............. false\n    //   module type: ..................... commonjs\n    //   parser engine type: .............. lalr\n    //   output main() in the module: ..... true\n    //   has user-specified main(): ....... false\n    //   has user-specified require()/import modules for main():\n    //   .................................. false\n    //   number of expected conflicts: .... 0\n    //\n    //\n    // Parser Analysis flags:\n    //\n    //   no significant actions (parser is a language matcher only):\n    //   .................................. false\n    //   uses yyleng: ..................... false\n    //   uses yylineno: ................... false\n    //   uses yytext: ..................... false\n    //   uses yylloc: ..................... false\n    //   uses ParseError API: ............. false\n    //   uses YYERROR: .................... false\n    //   uses YYRECOVERING: ............... false\n    //   uses YYERROK: .................... false\n    //   uses YYCLEARIN: .................. false\n    //   tracks rule values: .............. true\n    //   assigns rule values: ............. true\n    //   uses location tracking: .......... false\n    //   assigns location: ................ false\n    //   uses yystack: .................... false\n    //   uses yysstack: ................... false\n    //   uses yysp: ....................... true\n    //   uses yyrulelength: ............... false\n    //   uses yyMergeLocationInfo API: .... false\n    //   has error recovery: .............. false\n    //   has error reporting: ............. false\n    //\n    // --------- END OF REPORT -----------\n\ntrace: function no_op_trace() { },\nJisonParserError: JisonParserError,\nyy: {},\noptions: {\n  type: \"lalr\",\n  hasPartialLrUpgradeOnConflict: true,\n  errorRecoveryTokenDiscardCount: 3\n},\nsymbols_: {\n  \"$accept\": 0,\n  \"$end\": 1,\n  \"ADD\": 3,\n  \"ANGLE\": 16,\n  \"CHS\": 22,\n  \"COMMA\": 14,\n  \"CSS_CPROP\": 13,\n  \"CSS_VAR\": 12,\n  \"DIV\": 6,\n  \"EMS\": 20,\n  \"EOF\": 1,\n  \"EXS\": 21,\n  \"FREQ\": 18,\n  \"LENGTH\": 15,\n  \"LPAREN\": 7,\n  \"MUL\": 5,\n  \"NESTED_CALC\": 9,\n  \"NUMBER\": 11,\n  \"PERCENTAGE\": 28,\n  \"PREFIX\": 10,\n  \"REMS\": 23,\n  \"RES\": 19,\n  \"RPAREN\": 8,\n  \"SUB\": 4,\n  \"TIME\": 17,\n  \"VHS\": 24,\n  \"VMAXS\": 27,\n  \"VMINS\": 26,\n  \"VWS\": 25,\n  \"css_value\": 33,\n  \"css_variable\": 32,\n  \"error\": 2,\n  \"expression\": 29,\n  \"math_expression\": 30,\n  \"value\": 31\n},\nterminals_: {\n  1: \"EOF\",\n  2: \"error\",\n  3: \"ADD\",\n  4: \"SUB\",\n  5: \"MUL\",\n  6: \"DIV\",\n  7: \"LPAREN\",\n  8: \"RPAREN\",\n  9: \"NESTED_CALC\",\n  10: \"PREFIX\",\n  11: \"NUMBER\",\n  12: \"CSS_VAR\",\n  13: \"CSS_CPROP\",\n  14: \"COMMA\",\n  15: \"LENGTH\",\n  16: \"ANGLE\",\n  17: \"TIME\",\n  18: \"FREQ\",\n  19: \"RES\",\n  20: \"EMS\",\n  21: \"EXS\",\n  22: \"CHS\",\n  23: \"REMS\",\n  24: \"VHS\",\n  25: \"VWS\",\n  26: \"VMINS\",\n  27: \"VMAXS\",\n  28: \"PERCENTAGE\"\n},\nTERROR: 2,\n    EOF: 1,\n\n    // internals: defined here so the object *structure* doesn't get modified by parse() et al,\n    // thus helping JIT compilers like Chrome V8.\n    originalQuoteName: null,\n    originalParseError: null,\n    cleanupAfterParse: null,\n    constructParseErrorInfo: null,\n    yyMergeLocationInfo: null,\n\n    __reentrant_call_depth: 0,      // INTERNAL USE ONLY\n    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n\n    // APIs which will be set up depending on user action code analysis:\n    //yyRecovering: 0,\n    //yyErrOk: 0,\n    //yyClearIn: 0,\n\n    // Helper APIs\n    // -----------\n\n    // Helper function which can be overridden by user code later on: put suitable quotes around\n    // literal IDs in a description string.\n    quoteName: function parser_quoteName(id_str) {\n        return '\"' + id_str + '\"';\n    },\n\n    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    getSymbolName: function parser_getSymbolName(symbol) {\n        if (this.terminals_[symbol]) {\n            return this.terminals_[symbol];\n        }\n\n        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.\n        //\n        // An example of this may be where a rule's action code contains a call like this:\n        //\n        //      parser.getSymbolName(#$)\n        //\n        // to obtain a human-readable name of the current grammar rule.\n        var s = this.symbols_;\n        for (var key in s) {\n            if (s[key] === symbol) {\n                return key;\n            }\n        }\n        return null;\n    },\n\n    // Return a more-or-less human-readable description of the given symbol, when available,\n    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    describeSymbol: function parser_describeSymbol(symbol) {\n        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {\n            return this.terminal_descriptions_[symbol];\n        }\n        else if (symbol === this.EOF) {\n            return 'end of input';\n        }\n        var id = this.getSymbolName(symbol);\n        if (id) {\n            return this.quoteName(id);\n        }\n        return null;\n    },\n\n    // Produce a (more or less) human-readable list of expected tokens at the point of failure.\n    //\n    // The produced list may contain token or token set descriptions instead of the tokens\n    // themselves to help turning this output into something that easier to read by humans\n    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,\n    // expected terminals and nonterminals is produced.\n    //\n    // The returned list (array) will not contain any duplicate entries.\n    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {\n        var TERROR = this.TERROR;\n        var tokenset = [];\n        var check = {};\n        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?\n        // If so, use that one instead of the less palatable token set.\n        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {\n            return [\n                this.state_descriptions_[state]\n            ];\n        }\n        for (var p in this.table[state]) {\n            p = +p;\n            if (p !== TERROR) {\n                var d = do_not_describe ? p : this.describeSymbol(p);\n                if (d && !check[d]) {\n                    tokenset.push(d);\n                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.\n                }\n            }\n        }\n        return tokenset;\n    },\nproductions_: bp({\n  pop: u([\n  29,\n  s,\n  [30, 10],\n  31,\n  31,\n  32,\n  32,\n  s,\n  [33, 15]\n]),\n  rule: u([\n  2,\n  s,\n  [3, 5],\n  4,\n  7,\n  s,\n  [1, 4],\n  2,\n  4,\n  6,\n  s,\n  [1, 14],\n  2\n])\n}),\nperformAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {\n\n          /* this == yyval */\n\n          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!\n          var yy = this.yy;\n          var yyparser = yy.parser;\n          var yylexer = yy.lexer;\n\n          \n\n          switch (yystate) {\ncase 0:\n    /*! Production::    $accept : expression $end */\n\n    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp - 1];\n    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 1:\n    /*! Production::    expression : math_expression EOF */\n\n    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp - 1];\n    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)\n    \n    \n    return yyvstack[yysp - 1];\n    break;\n\ncase 2:\n    /*! Production::    math_expression : math_expression ADD math_expression */\ncase 3:\n    /*! Production::    math_expression : math_expression SUB math_expression */\ncase 4:\n    /*! Production::    math_expression : math_expression MUL math_expression */\ncase 5:\n    /*! Production::    math_expression : math_expression DIV math_expression */\n\n    this.$ = { type: 'MathExpression', operator: yyvstack[yysp - 1], left: yyvstack[yysp - 2], right: yyvstack[yysp] };\n    break;\n\ncase 6:\n    /*! Production::    math_expression : LPAREN math_expression RPAREN */\n\n    this.$ = yyvstack[yysp - 1];\n    break;\n\ncase 7:\n    /*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */\n\n    this.$ = { type: 'Calc', value: yyvstack[yysp - 1] };\n    break;\n\ncase 8:\n    /*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */\n\n    this.$ = { type: 'Calc', value: yyvstack[yysp - 1], prefix: yyvstack[yysp - 5] };\n    break;\n\ncase 9:\n    /*! Production::    math_expression : css_variable */\ncase 10:\n    /*! Production::    math_expression : css_value */\ncase 11:\n    /*! Production::    math_expression : value */\n\n    this.$ = yyvstack[yysp];\n    break;\n\ncase 12:\n    /*! Production::    value : NUMBER */\n\n    this.$ = { type: 'Value', value: parseFloat(yyvstack[yysp]) };\n    break;\n\ncase 13:\n    /*! Production::    value : SUB NUMBER */\n\n    this.$ = { type: 'Value', value: parseFloat(yyvstack[yysp]) * -1 };\n    break;\n\ncase 14:\n    /*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP RPAREN */\n\n    this.$ = { type: 'CssVariable', value: yyvstack[yysp - 1] };\n    break;\n\ncase 15:\n    /*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP COMMA math_expression RPAREN */\n\n    this.$ = { type: 'CssVariable', value: yyvstack[yysp - 3], fallback: yyvstack[yysp - 1] };\n    break;\n\ncase 16:\n    /*! Production::    css_value : LENGTH */\n\n    this.$ = { type: 'LengthValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };\n    break;\n\ncase 17:\n    /*! Production::    css_value : ANGLE */\n\n    this.$ = { type: 'AngleValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };\n    break;\n\ncase 18:\n    /*! Production::    css_value : TIME */\n\n    this.$ = { type: 'TimeValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };\n    break;\n\ncase 19:\n    /*! Production::    css_value : FREQ */\n\n    this.$ = { type: 'FrequencyValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };\n    break;\n\ncase 20:\n    /*! Production::    css_value : RES */\n\n    this.$ = { type: 'ResolutionValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };\n    break;\n\ncase 21:\n    /*! Production::    css_value : EMS */\n\n    this.$ = { type: 'EmValue', value: parseFloat(yyvstack[yysp]), unit: 'em' };\n    break;\n\ncase 22:\n    /*! Production::    css_value : EXS */\n\n    this.$ = { type: 'ExValue', value: parseFloat(yyvstack[yysp]), unit: 'ex' };\n    break;\n\ncase 23:\n    /*! Production::    css_value : CHS */\n\n    this.$ = { type: 'ChValue', value: parseFloat(yyvstack[yysp]), unit: 'ch' };\n    break;\n\ncase 24:\n    /*! Production::    css_value : REMS */\n\n    this.$ = { type: 'RemValue', value: parseFloat(yyvstack[yysp]), unit: 'rem' };\n    break;\n\ncase 25:\n    /*! Production::    css_value : VHS */\n\n    this.$ = { type: 'VhValue', value: parseFloat(yyvstack[yysp]), unit: 'vh' };\n    break;\n\ncase 26:\n    /*! Production::    css_value : VWS */\n\n    this.$ = { type: 'VwValue', value: parseFloat(yyvstack[yysp]), unit: 'vw' };\n    break;\n\ncase 27:\n    /*! Production::    css_value : VMINS */\n\n    this.$ = { type: 'VminValue', value: parseFloat(yyvstack[yysp]), unit: 'vmin' };\n    break;\n\ncase 28:\n    /*! Production::    css_value : VMAXS */\n\n    this.$ = { type: 'VmaxValue', value: parseFloat(yyvstack[yysp]), unit: 'vmax' };\n    break;\n\ncase 29:\n    /*! Production::    css_value : PERCENTAGE */\n\n    this.$ = { type: 'PercentageValue', value: parseFloat(yyvstack[yysp]), unit: '%' };\n    break;\n\ncase 30:\n    /*! Production::    css_value : SUB css_value */\n\n    var prev = yyvstack[yysp]; prev.value *= -1; this.$ = prev;\n    break;\n\n}\n},\ntable: bt({\n  len: u([\n  24,\n  1,\n  5,\n  23,\n  1,\n  18,\n  s,\n  [0, 3],\n  1,\n  s,\n  [0, 16],\n  s,\n  [23, 4],\n  c,\n  [28, 3],\n  0,\n  0,\n  16,\n  1,\n  6,\n  6,\n  s,\n  [0, 3],\n  5,\n  1,\n  2,\n  c,\n  [37, 3],\n  c,\n  [20, 3],\n  5,\n  0,\n  0\n]),\n  symbol: u([\n  4,\n  7,\n  9,\n  11,\n  12,\n  s,\n  [15, 19, 1],\n  1,\n  1,\n  s,\n  [3, 4, 1],\n  c,\n  [30, 19],\n  c,\n  [29, 4],\n  7,\n  4,\n  10,\n  11,\n  c,\n  [22, 14],\n  c,\n  [19, 3],\n  c,\n  [43, 22],\n  c,\n  [23, 69],\n  c,\n  [139, 4],\n  8,\n  c,\n  [51, 24],\n  4,\n  c,\n  [138, 15],\n  13,\n  c,\n  [186, 5],\n  8,\n  c,\n  [6, 6],\n  c,\n  [5, 5],\n  9,\n  8,\n  14,\n  c,\n  [159, 47],\n  c,\n  [60, 10]\n]),\n  type: u([\n  s,\n  [2, 19],\n  s,\n  [0, 5],\n  1,\n  s,\n  [2, 24],\n  s,\n  [0, 4],\n  c,\n  [22, 19],\n  c,\n  [43, 42],\n  c,\n  [23, 70],\n  c,\n  [28, 25],\n  c,\n  [45, 25],\n  c,\n  [113, 54]\n]),\n  state: u([\n  1,\n  2,\n  8,\n  6,\n  7,\n  30,\n  c,\n  [4, 3],\n  33,\n  37,\n  c,\n  [5, 3],\n  38,\n  c,\n  [4, 3],\n  39,\n  c,\n  [4, 3],\n  40,\n  c,\n  [4, 3],\n  42,\n  c,\n  [21, 4],\n  50,\n  c,\n  [5, 3],\n  51,\n  c,\n  [4, 3]\n]),\n  mode: u([\n  s,\n  [1, 179],\n  s,\n  [2, 3],\n  c,\n  [5, 5],\n  c,\n  [6, 4],\n  s,\n  [1, 57]\n]),\n  goto: u([\n  5,\n  3,\n  4,\n  24,\n  s,\n  [9, 15, 1],\n  s,\n  [25, 5, 1],\n  c,\n  [24, 19],\n  31,\n  35,\n  32,\n  34,\n  c,\n  [18, 14],\n  36,\n  c,\n  [38, 19],\n  c,\n  [19, 57],\n  c,\n  [118, 4],\n  41,\n  c,\n  [24, 19],\n  43,\n  35,\n  c,\n  [16, 14],\n  44,\n  s,\n  [2, 3],\n  28,\n  29,\n  2,\n  s,\n  [3, 3],\n  28,\n  29,\n  3,\n  c,\n  [53, 4],\n  s,\n  [45, 5, 1],\n  c,\n  [100, 42],\n  52,\n  c,\n  [5, 4],\n  53\n])\n}),\ndefaultActions: bda({\n  idx: u([\n  6,\n  7,\n  8,\n  s,\n  [10, 16, 1],\n  33,\n  34,\n  39,\n  40,\n  41,\n  45,\n  47,\n  52,\n  53\n]),\n  goto: u([\n  9,\n  10,\n  11,\n  s,\n  [16, 14, 1],\n  12,\n  1,\n  30,\n  13,\n  s,\n  [4, 4, 1],\n  14,\n  15,\n  8\n])\n}),\nparseError: function parseError(str, hash, ExceptionClass) {\n    if (hash.recoverable) {\n        if (typeof this.trace === 'function') {\n            this.trace(str);\n        }\n        hash.destroy();             // destroy... well, *almost*!\n    } else {\n        if (typeof this.trace === 'function') {\n            this.trace(str);\n        }\n        if (!ExceptionClass) {\n            ExceptionClass = this.JisonParserError;\n        }\n        throw new ExceptionClass(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this;\n    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)\n    var sstack = new Array(128);        // state stack: stores states (column storage)\n\n    var vstack = new Array(128);        // semantic value stack\n\n    var table = this.table;\n    var sp = 0;                         // 'stack pointer': index into the stacks\n\n\n    \n\n\n    var symbol = 0;\n\n\n\n    var TERROR = this.TERROR;\n    var EOF = this.EOF;\n    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;\n    var NO_ACTION = [0, 54 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];\n\n    var lexer;\n    if (this.__lexer__) {\n        lexer = this.__lexer__;\n    } else {\n        lexer = this.__lexer__ = Object.create(this.lexer);\n    }\n\n    var sharedState_yy = {\n        parseError: undefined,\n        quoteName: undefined,\n        lexer: undefined,\n        parser: undefined,\n        pre_parse: undefined,\n        post_parse: undefined,\n        pre_lex: undefined,\n        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!\n    };\n\n    var ASSERT;\n    if (typeof assert !== 'function') {\n        ASSERT = function JisonAssert(cond, msg) {\n            if (!cond) {\n                throw new Error('assertion failed: ' + (msg || '***'));\n            }\n        };\n    } else {\n        ASSERT = assert;\n    }\n\n    this.yyGetSharedState = function yyGetSharedState() {\n        return sharedState_yy;\n    };\n\n\n\n\n\n\n\n\n    function shallow_copy_noclobber(dst, src) {\n        for (var k in src) {\n            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {\n                dst[k] = src[k];\n            }\n        }\n    }\n\n    // copy state\n    shallow_copy_noclobber(sharedState_yy, this.yy);\n\n    sharedState_yy.lexer = lexer;\n    sharedState_yy.parser = this;\n\n\n\n\n\n\n    // Does the shared state override the default `parseError` that already comes with this instance?\n    if (typeof sharedState_yy.parseError === 'function') {\n        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {\n            if (!ExceptionClass) {\n                ExceptionClass = this.JisonParserError;\n            }\n            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);\n        };\n    } else {\n        this.parseError = this.originalParseError;\n    }\n\n    // Does the shared state override the default `quoteName` that already comes with this instance?\n    if (typeof sharedState_yy.quoteName === 'function') {\n        this.quoteName = function quoteNameAlt(id_str) {\n            return sharedState_yy.quoteName.call(this, id_str);\n        };\n    } else {\n        this.quoteName = this.originalQuoteName;\n    }\n\n    // set up the cleanup function; make it an API so that external code can re-use this one in case of\n    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which\n    // case this parse() API method doesn't come with a `finally { ... }` block any more!\n    //\n    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n    //       or else your `sharedState`, etc. references will be *wrong*!\n    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {\n        var rv;\n\n        if (invoke_post_methods) {\n            var hash;\n\n            if (sharedState_yy.post_parse || this.post_parse) {\n                // create an error hash info instance: we re-use this API in a **non-error situation**\n                // as this one delivers all parser internals ready for access by userland code.\n                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);\n            }\n\n            if (sharedState_yy.post_parse) {\n                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);\n                if (typeof rv !== 'undefined') resultValue = rv;\n            }\n            if (this.post_parse) {\n                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);\n                if (typeof rv !== 'undefined') resultValue = rv;\n            }\n\n            // cleanup:\n            if (hash && hash.destroy) {\n                hash.destroy();\n            }\n        }\n\n        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.\n\n        // clean up the lingering lexer structures as well:\n        if (lexer.cleanupAfterLex) {\n            lexer.cleanupAfterLex(do_not_nuke_errorinfos);\n        }\n\n        // prevent lingering circular references from causing memory leaks:\n        if (sharedState_yy) {\n            sharedState_yy.lexer = undefined;\n            sharedState_yy.parser = undefined;\n            if (lexer.yy === sharedState_yy) {\n                lexer.yy = undefined;\n            }\n        }\n        sharedState_yy = undefined;\n        this.parseError = this.originalParseError;\n        this.quoteName = this.originalQuoteName;\n\n        // nuke the vstack[] array at least as that one will still reference obsoleted user values.\n        // To be safe, we nuke the other internal stack columns as well...\n        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC\n        sstack.length = 0;\n\n        vstack.length = 0;\n        sp = 0;\n\n        // nuke the error hash info instances created during this run.\n        // Userland code must COPY any data/references\n        // in the error hash instance(s) it is more permanently interested in.\n        if (!do_not_nuke_errorinfos) {\n            for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n                var el = this.__error_infos[i];\n                if (el && typeof el.destroy === 'function') {\n                    el.destroy();\n                }\n            }\n            this.__error_infos.length = 0;\n\n\n        }\n\n        return resultValue;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!\n    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {\n        var pei = {\n            errStr: msg,\n            exception: ex,\n            text: lexer.match,\n            value: lexer.yytext,\n            token: this.describeSymbol(symbol) || symbol,\n            token_id: symbol,\n            line: lexer.yylineno,\n\n            expected: expected,\n            recoverable: recoverable,\n            state: state,\n            action: action,\n            new_state: newState,\n            symbol_stack: stack,\n            state_stack: sstack,\n            value_stack: vstack,\n\n            stack_pointer: sp,\n            yy: sharedState_yy,\n            lexer: lexer,\n            parser: this,\n\n            // and make sure the error info doesn't stay due to potential\n            // ref cycle via userland code manipulations.\n            // These would otherwise all be memory leak opportunities!\n            //\n            // Note that only array and object references are nuked as those\n            // constitute the set of elements which can produce a cyclic ref.\n            // The rest of the members is kept intact as they are harmless.\n            destroy: function destructParseErrorInfo() {\n                // remove cyclic references added to error info:\n                // info.yy = null;\n                // info.lexer = null;\n                // info.value = null;\n                // info.value_stack = null;\n                // ...\n                var rec = !!this.recoverable;\n                for (var key in this) {\n                    if (this.hasOwnProperty(key) && typeof key === 'object') {\n                        this[key] = undefined;\n                    }\n                }\n                this.recoverable = rec;\n            }\n        };\n        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n        this.__error_infos.push(pei);\n        return pei;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n    function getNonTerminalFromCode(symbol) {\n        var tokenName = self.getSymbolName(symbol);\n        if (!tokenName) {\n            tokenName = symbol;\n        }\n        return tokenName;\n    }\n\n\n    function stdLex() {\n        var token = lexer.lex();\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n\n        return token || EOF;\n    }\n\n    function fastLex() {\n        var token = lexer.fastLex();\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n\n        return token || EOF;\n    }\n\n    var lex = stdLex;\n\n\n    var state, action, r, t;\n    var yyval = {\n        $: true,\n        _$: undefined,\n        yy: sharedState_yy\n    };\n    var p;\n    var yyrulelen;\n    var this_production;\n    var newState;\n    var retval = false;\n\n\n    try {\n        this.__reentrant_call_depth++;\n\n        lexer.setInput(input, sharedState_yy);\n\n        // NOTE: we *assume* no lexer pre/post handlers are set up *after* \n        // this initial `setInput()` call: hence we can now check and decide\n        // whether we'll go with the standard, slower, lex() API or the\n        // `fast_lex()` one:\n        if (typeof lexer.canIUse === 'function') {\n            var lexerInfo = lexer.canIUse();\n            if (lexerInfo.fastLex && typeof fastLex === 'function') {\n                lex = fastLex;\n            }\n        } \n\n\n\n        vstack[sp] = null;\n        sstack[sp] = 0;\n        stack[sp] = 0;\n        ++sp;\n\n\n\n\n\n        if (this.pre_parse) {\n            this.pre_parse.call(this, sharedState_yy);\n        }\n        if (sharedState_yy.pre_parse) {\n            sharedState_yy.pre_parse.call(this, sharedState_yy);\n        }\n\n        newState = sstack[sp - 1];\n        for (;;) {\n            // retrieve state number from top of stack\n            state = newState;               // sstack[sp - 1];\n\n            // use default actions if available\n            if (this.defaultActions[state]) {\n                action = 2;\n                newState = this.defaultActions[state];\n            } else {\n                // The single `==` condition below covers both these `===` comparisons in a single\n                // operation:\n                //\n                //     if (symbol === null || typeof symbol === 'undefined') ...\n                if (!symbol) {\n                    symbol = lex();\n                }\n                // read action for current state and first input\n                t = (table[state] && table[state][symbol]) || NO_ACTION;\n                newState = t[1];\n                action = t[0];\n\n\n\n\n\n\n\n\n\n\n\n                // handle parse error\n                if (!action) {\n                    var errStr;\n                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);\n                    var expected = this.collect_expected_token_set(state);\n\n                    // Report error\n                    if (typeof lexer.yylineno === 'number') {\n                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';\n                    } else {\n                        errStr = 'Parse error: ';\n                    }\n                    if (typeof lexer.showPosition === 'function') {\n                        errStr += '\\n' + lexer.showPosition(79 - 10, 10) + '\\n';\n                    }\n                    if (expected.length) {\n                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;\n                    } else {\n                        errStr += 'Unexpected ' + errSymbolDescr;\n                    }\n                    // we cannot recover from the error!\n                    p = this.constructParseErrorInfo(errStr, null, expected, false);\n                    r = this.parseError(p.errStr, p, this.JisonParserError);\n                    if (typeof r !== 'undefined') {\n                        retval = r;\n                    }\n                    break;\n                }\n\n\n            }\n\n\n\n\n\n\n\n\n\n\n            switch (action) {\n            // catch misc. parse failures:\n            default:\n                // this shouldn't happen, unless resolve defaults are off\n                if (action instanceof Array) {\n                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);\n                    r = this.parseError(p.errStr, p, this.JisonParserError);\n                    if (typeof r !== 'undefined') {\n                        retval = r;\n                    }\n                    break;\n                }\n                // Another case of better safe than sorry: in case state transitions come out of another error recovery process\n                // or a buggy LUT (LookUp Table):\n                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);\n                r = this.parseError(p.errStr, p, this.JisonParserError);\n                if (typeof r !== 'undefined') {\n                    retval = r;\n                }\n                break;\n\n            // shift:\n            case 1:\n                stack[sp] = symbol;\n                vstack[sp] = lexer.yytext;\n\n                sstack[sp] = newState; // push state\n\n                ++sp;\n                symbol = 0;\n\n\n\n\n                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:\n\n\n\n\n                continue;\n\n            // reduce:\n            case 2:\n\n\n\n                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...\n                yyrulelen = this_production[1];\n\n\n\n\n\n\n\n\n\n\n                r = this.performAction.call(yyval, newState, sp - 1, vstack);\n\n                if (typeof r !== 'undefined') {\n                    retval = r;\n                    break;\n                }\n\n                // pop off stack\n                sp -= yyrulelen;\n\n                // don't overwrite the `symbol` variable: use a local var to speed things up:\n                var ntsymbol = this_production[0];    // push nonterminal (reduce)\n                stack[sp] = ntsymbol;\n                vstack[sp] = yyval.$;\n\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[sstack[sp - 1]][ntsymbol];\n                sstack[sp] = newState;\n                ++sp;\n\n\n\n\n\n\n\n\n\n                continue;\n\n            // accept:\n            case 3:\n                if (sp !== -2) {\n                    retval = true;\n                    // Return the `$accept` rule's `$$` result, if available.\n                    //\n                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,\n                    // default, action):\n                    //\n                    //     $accept: <startSymbol> $end\n                    //                  %{ $$ = $1; @$ = @1; %}\n                    //\n                    // which, combined with the parse kernel's `$accept` state behaviour coded below,\n                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,\n                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)\n                    //\n                    // In code:\n                    //\n                    //                  %{\n                    //                      @$ = @1;            // if location tracking support is included\n                    //                      if (typeof $1 !== 'undefined')\n                    //                          return $1;\n                    //                      else\n                    //                          return true;           // the default parse result if the rule actions don't produce anything\n                    //                  %}\n                    sp--;\n                    if (typeof vstack[sp] !== 'undefined') {\n                        retval = vstack[sp];\n                    }\n                }\n                break;\n            }\n\n            // break out of loop: we accept or fail with error\n            break;\n        }\n    } catch (ex) {\n        // report exceptions through the parseError callback too, but keep the exception intact\n        // if it is a known parser or lexer error which has been thrown by parseError() already:\n        if (ex instanceof this.JisonParserError) {\n            throw ex;\n        }\n        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {\n            throw ex;\n        }\n\n        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);\n        retval = false;\n        r = this.parseError(p.errStr, p, this.JisonParserError);\n        if (typeof r !== 'undefined') {\n            retval = r;\n        }\n    } finally {\n        retval = this.cleanupAfterParse(retval, true, true);\n        this.__reentrant_call_depth--;\n    }   // /finally\n\n    return retval;\n}\n};\nparser.originalParseError = parser.parseError;\nparser.originalQuoteName = parser.quoteName;\n/* lexer generated by jison-lex 0.6.1-215 */\n\n/*\n * Returns a Lexer object of the following structure:\n *\n *  Lexer: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a direct reference!\n *\n *               This \"shared context\" object was passed to the lexer by way of \n *               the `lexer.setInput(str, yy)` API before you may use it.\n *\n *               This \"shared context\" object is passed to the lexer action code in `performAction()`\n *               so userland code in the lexer actions may communicate with the outside world \n *               and/or other lexer rules' actions in more or less complex ways.\n *\n *  }\n *\n *  Lexer.prototype: {\n *    EOF: 1,\n *    ERROR: 2,\n *\n *    yy:        The overall \"shared context\" object reference.\n *\n *    JisonLexerError: function(msg, hash),\n *\n *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `lexer` instance. \n *                               `yy_` is an alias for `this` lexer instance reference used internally.\n *\n *               - `yy`      : a reference to the `yy` \"shared state\" object which was passed to the lexer\n *                             by way of the `lexer.setInput(str, yy)` API before.\n *\n *                             Note:\n *                             The extra arguments you specified in the `%parse-param` statement in your\n *                             **parser** grammar definition file are passed to the lexer via this object\n *                             reference as member variables.\n *\n *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.\n *\n *               - `YY_START`: the current lexer \"start condition\" state.\n *\n *    parseError: function(str, hash, ExceptionClass),\n *\n *    constructLexErrorInfo: function(error_message, is_recoverable),\n *               Helper function.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this lexer kernel in many places; example usage:\n *\n *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);\n *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);\n *\n *    options: { ... lexer %options ... },\n *\n *    lex: function(),\n *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the **parser** or the jison run-time; \n *               when such a collision is detected an exception is thrown to prevent the generated run-time \n *               from silently accepting this confusing and potentially hazardous situation! \n *\n *    cleanupAfterLex: function(do_not_nuke_errorinfos),\n *               Helper function.\n *\n *               This helper API is invoked when the **parse process** has completed: it is the responsibility\n *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. \n *\n *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.\n *\n *    setInput: function(input, [yy]),\n *\n *\n *    input: function(),\n *\n *\n *    unput: function(str),\n *\n *\n *    more: function(),\n *\n *\n *    reject: function(),\n *\n *\n *    less: function(n),\n *\n *\n *    pastInput: function(n),\n *\n *\n *    upcomingInput: function(n),\n *\n *\n *    showPosition: function(),\n *\n *\n *    test_match: function(regex_match_array, rule_index),\n *\n *\n *    next: function(),\n *\n *\n *    begin: function(condition),\n *\n *\n *    pushState: function(condition),\n *\n *\n *    popState: function(),\n *\n *\n *    topState: function(),\n *\n *\n *    _currentRules: function(),\n *\n *\n *    stateStackSize: function(),\n *\n *\n *    performAction: function(yy, yy_, yyrulenumber, YY_START),\n *\n *\n *    rules: [...],\n *\n *\n *    conditions: {associative list: name ==> set},\n *  }\n *\n *\n *  token location info (`yylloc`): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *  }\n *\n * while `this` will reference the current lexer instance.\n *\n * When `parseError` is invoked by the lexer, the default implementation will\n * attempt to invoke `yy.parser.parseError()`; when this callback is not provided\n * it will try to invoke `yy.parseError()` instead. When that callback is also not\n * provided, a `JisonLexerError` exception will be thrown containing the error\n * message and `hash`, as constructed by the `constructLexErrorInfo()` API.\n *\n * Note that the lexer's `JisonLexerError` error class is passed via the\n * `ExceptionClass` argument, which is invoked to construct the exception\n * instance to be thrown, so technically `parseError` will throw the object\n * produced by the `new ExceptionClass(str, hash)` JavaScript expression.\n *\n * ---\n *\n * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.\n * These options are available:\n *\n * (Options are permanent.)\n *  \n *  yy: {\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *  }\n *\n *  lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n * WARNING: the next set of options are not meant to be changed. They echo the abilities of\n * the lexer as per when it was compiled!\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\n\n\nvar lexer = function() {\n  /**\n   * See also:\n   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n   * with userland code which might access the derived class in a 'classic' way.\n   *\n   * @public\n   * @constructor\n   * @nocollapse\n   */\n  function JisonLexerError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n      enumerable: false,\n      writable: false,\n      value: 'JisonLexerError'\n    });\n\n    if (msg == null)\n      msg = '???';\n\n    Object.defineProperty(this, 'message', {\n      enumerable: false,\n      writable: true,\n      value: msg\n    });\n\n    this.hash = hash;\n    var stacktrace;\n\n    if (hash && hash.exception instanceof Error) {\n      var ex2 = hash.exception;\n      this.message = ex2.message || msg;\n      stacktrace = ex2.stack;\n    }\n\n    if (!stacktrace) {\n      if (Error.hasOwnProperty('captureStackTrace')) {\n        // V8\n        Error.captureStackTrace(this, this.constructor);\n      } else {\n        stacktrace = new Error(msg).stack;\n      }\n    }\n\n    if (stacktrace) {\n      Object.defineProperty(this, 'stack', {\n        enumerable: false,\n        writable: false,\n        value: stacktrace\n      });\n    }\n  }\n\n  if (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);\n  } else {\n    JisonLexerError.prototype = Object.create(Error.prototype);\n  }\n\n  JisonLexerError.prototype.constructor = JisonLexerError;\n  JisonLexerError.prototype.name = 'JisonLexerError';\n\n  var lexer = {\n    \n// Code Generator Information Report\n// ---------------------------------\n//\n// Options:\n//\n//   backtracking: .................... false\n//   location.ranges: ................. false\n//   location line+column tracking: ... true\n//\n//\n// Forwarded Parser Analysis flags:\n//\n//   uses yyleng: ..................... false\n//   uses yylineno: ................... false\n//   uses yytext: ..................... false\n//   uses yylloc: ..................... false\n//   uses lexer values: ............... true / true\n//   location tracking: ............... false\n//   location assignment: ............. false\n//\n//\n// Lexer Analysis flags:\n//\n//   uses yyleng: ..................... ???\n//   uses yylineno: ................... ???\n//   uses yytext: ..................... ???\n//   uses yylloc: ..................... ???\n//   uses ParseError API: ............. ???\n//   uses yyerror: .................... ???\n//   uses location tracking & editing:  ???\n//   uses more() API: ................. ???\n//   uses unput() API: ................ ???\n//   uses reject() API: ............... ???\n//   uses less() API: ................. ???\n//   uses display APIs pastInput(), upcomingInput(), showPosition():\n//        ............................. ???\n//   uses describeYYLLOC() API: ....... ???\n//\n// --------- END OF REPORT -----------\n\nEOF: 1,\n    ERROR: 2,\n\n    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator\n\n    // options: {},                             /// <-- injected by the code generator\n\n    // yy: ...,                                 /// <-- injected by setInput()\n\n    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  \n\n    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  \n    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  \n    done: false,                                /// INTERNAL USE ONLY  \n    _backtrack: false,                          /// INTERNAL USE ONLY  \n    _input: '',                                 /// INTERNAL USE ONLY  \n    _more: false,                               /// INTERNAL USE ONLY  \n    _signaled_error_token: false,               /// INTERNAL USE ONLY  \n    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  \n    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  \n    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  \n    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  \n    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  \n    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  \n    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  \n    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  \n    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  \n\n    /**\n     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {\n      msg = '' + msg;\n\n      // heuristic to determine if the error message already contains a (partial) source code dump\n      // as produced by either `showPosition()` or `prettyPrintRange()`:\n      if (show_input_position == undefined) {\n        show_input_position = !(msg.indexOf('\\n') > 0 && msg.indexOf('^') > 0);\n      }\n\n      if (this.yylloc && show_input_position) {\n        if (typeof this.prettyPrintRange === 'function') {\n          var pretty_src = this.prettyPrintRange(this.yylloc);\n\n          if (!/\\n\\s*$/.test(msg)) {\n            msg += '\\n';\n          }\n\n          msg += '\\n  Erroneous area:\\n' + this.prettyPrintRange(this.yylloc);\n        } else if (typeof this.showPosition === 'function') {\n          var pos_str = this.showPosition();\n\n          if (pos_str) {\n            if (msg.length && msg[msg.length - 1] !== '\\n' && pos_str[0] !== '\\n') {\n              msg += '\\n' + pos_str;\n            } else {\n              msg += pos_str;\n            }\n          }\n        }\n      }\n\n      /** @constructor */\n      var pei = {\n        errStr: msg,\n        recoverable: !!recoverable,\n        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  \n        token: null,\n        line: this.yylineno,\n        loc: this.yylloc,\n        yy: this.yy,\n        lexer: this,\n\n        /**\n         * and make sure the error info doesn't stay due to potential\n         * ref cycle via userland code manipulations.\n         * These would otherwise all be memory leak opportunities!\n         * \n         * Note that only array and object references are nuked as those\n         * constitute the set of elements which can produce a cyclic ref.\n         * The rest of the members is kept intact as they are harmless.\n         * \n         * @public\n         * @this {LexErrorInfo}\n         */\n        destroy: function destructLexErrorInfo() {\n          // remove cyclic references added to error info:\n          // info.yy = null;\n          // info.lexer = null;\n          // ...\n          var rec = !!this.recoverable;\n\n          for (var key in this) {\n            if (this.hasOwnProperty(key) && typeof key === 'object') {\n              this[key] = undefined;\n            }\n          }\n\n          this.recoverable = rec;\n        }\n      };\n\n      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n      this.__error_infos.push(pei);\n\n      return pei;\n    },\n\n    /**\n     * handler which is invoked when a lexer error occurs.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    parseError: function lexer_parseError(str, hash, ExceptionClass) {\n      if (!ExceptionClass) {\n        ExceptionClass = this.JisonLexerError;\n      }\n\n      if (this.yy) {\n        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {\n          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n        } else if (typeof this.yy.parseError === 'function') {\n          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n        }\n      }\n\n      throw new ExceptionClass(str, hash);\n    },\n\n    /**\n     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    yyerror: function yyError(str /*, ...args */) {\n      var lineno_msg = '';\n\n      if (this.yylloc) {\n        lineno_msg = ' on line ' + (this.yylineno + 1);\n      }\n\n      var p = this.constructLexErrorInfo(\n        'Lexical error' + lineno_msg + ': ' + str,\n        this.options.lexerErrorsAreRecoverable\n      );\n\n      // Add any extra args to the hash under the name `extra_error_attributes`:\n      var args = Array.prototype.slice.call(arguments, 1);\n\n      if (args.length) {\n        p.extra_error_attributes = args;\n      }\n\n      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n    },\n\n    /**\n     * final cleanup function for when we have completed lexing the input;\n     * make it an API so that external code can use this one once userland\n     * code has decided it's time to destroy any lingering lexer error\n     * hash object instances and the like: this function helps to clean\n     * up these constructs, which *may* carry cyclic references which would\n     * otherwise prevent the instances from being properly and timely\n     * garbage-collected, i.e. this function helps prevent memory leaks!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {\n      // prevent lingering circular references from causing memory leaks:\n      this.setInput('', {});\n\n      // nuke the error hash info instances created during this run.\n      // Userland code must COPY any data/references\n      // in the error hash instance(s) it is more permanently interested in.\n      if (!do_not_nuke_errorinfos) {\n        for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n          var el = this.__error_infos[i];\n\n          if (el && typeof el.destroy === 'function') {\n            el.destroy();\n          }\n        }\n\n        this.__error_infos.length = 0;\n      }\n\n      return this;\n    },\n\n    /**\n     * clear the lexer token context; intended for internal use only\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    clear: function lexer_clear() {\n      this.yytext = '';\n      this.yyleng = 0;\n      this.match = '';\n\n      // - DO NOT reset `this.matched`\n      this.matches = false;\n\n      this._more = false;\n      this._backtrack = false;\n      var col = (this.yylloc ? this.yylloc.last_column : 0);\n\n      this.yylloc = {\n        first_line: this.yylineno + 1,\n        first_column: col,\n        last_line: this.yylineno + 1,\n        last_column: col,\n        range: [this.offset, this.offset]\n      };\n    },\n\n    /**\n     * resets the lexer, sets new input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    setInput: function lexer_setInput(input, yy) {\n      this.yy = yy || this.yy || {};\n\n      // also check if we've fully initialized the lexer instance,\n      // including expansion work to be done to go from a loaded\n      // lexer to a usable lexer:\n      if (!this.__decompressed) {\n        // step 1: decompress the regex list:\n        var rules = this.rules;\n\n        for (var i = 0, len = rules.length; i < len; i++) {\n          var rule_re = rules[i];\n\n          // compression: is the RE an xref to another RE slot in the rules[] table?\n          if (typeof rule_re === 'number') {\n            rules[i] = rules[rule_re];\n          }\n        }\n\n        // step 2: unfold the conditions[] set to make these ready for use:\n        var conditions = this.conditions;\n\n        for (var k in conditions) {\n          var spec = conditions[k];\n          var rule_ids = spec.rules;\n          var len = rule_ids.length;\n          var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! \n          var rule_new_ids = new Array(len + 1);\n\n          for (var i = 0; i < len; i++) {\n            var idx = rule_ids[i];\n            var rule_re = rules[idx];\n            rule_regexes[i + 1] = rule_re;\n            rule_new_ids[i + 1] = idx;\n          }\n\n          spec.rules = rule_new_ids;\n          spec.__rule_regexes = rule_regexes;\n          spec.__rule_count = len;\n        }\n\n        this.__decompressed = true;\n      }\n\n      this._input = input || '';\n      this.clear();\n      this._signaled_error_token = false;\n      this.done = false;\n      this.yylineno = 0;\n      this.matched = '';\n      this.conditionStack = ['INITIAL'];\n      this.__currentRuleSet__ = null;\n\n      this.yylloc = {\n        first_line: 1,\n        first_column: 0,\n        last_line: 1,\n        last_column: 0,\n        range: [0, 0]\n      };\n\n      this.offset = 0;\n      return this;\n    },\n\n    /**\n     * edit the remaining input via user-specified callback.\n     * This can be used to forward-adjust the input-to-parse, \n     * e.g. inserting macro expansions and alike in the\n     * input which has yet to be lexed.\n     * The behaviour of this API contrasts the `unput()` et al\n     * APIs as those act on the *consumed* input, while this\n     * one allows one to manipulate the future, without impacting\n     * the current `yyloc` cursor location or any history. \n     * \n     * Use this API to help implement C-preprocessor-like\n     * `#include` statements, etc.\n     * \n     * The provided callback must be synchronous and is\n     * expected to return the edited input (string).\n     *\n     * The `cpsArg` argument value is passed to the callback\n     * as-is.\n     *\n     * `callback` interface: \n     * `function callback(input, cpsArg)`\n     * \n     * - `input` will carry the remaining-input-to-lex string\n     *   from the lexer.\n     * - `cpsArg` is `cpsArg` passed into this API.\n     * \n     * The `this` reference for the callback will be set to\n     * reference this lexer instance so that userland code\n     * in the callback can easily and quickly access any lexer\n     * API. \n     *\n     * When the callback returns a non-string-type falsey value,\n     * we assume the callback did not edit the input and we\n     * will using the input as-is.\n     *\n     * When the callback returns a non-string-type value, it\n     * is converted to a string for lexing via the `\"\" + retval`\n     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html \n     * -- that way any returned object's `toValue()` and `toString()`\n     * methods will be invoked in a proper/desirable order.)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {\n      var rv = callback.call(this, this._input, cpsArg);\n\n      if (typeof rv !== 'string') {\n        if (rv) {\n          this._input = '' + rv;\n        } \n        // else: keep `this._input` as is.  \n      } else {\n        this._input = rv;\n      }\n\n      return this;\n    },\n\n    /**\n     * consumes and returns one char from the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    input: function lexer_input() {\n      if (!this._input) {\n        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)\n        return null;\n      }\n\n      var ch = this._input[0];\n      this.yytext += ch;\n      this.yyleng++;\n      this.offset++;\n      this.match += ch;\n      this.matched += ch;\n\n      // Count the linenumber up when we hit the LF (or a stand-alone CR).\n      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo\n      // and we advance immediately past the LF as well, returning both together as if\n      // it was all a single 'character' only.\n      var slice_len = 1;\n\n      var lines = false;\n\n      if (ch === '\\n') {\n        lines = true;\n      } else if (ch === '\\r') {\n        lines = true;\n        var ch2 = this._input[1];\n\n        if (ch2 === '\\n') {\n          slice_len++;\n          ch += ch2;\n          this.yytext += ch2;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch2;\n          this.matched += ch2;\n          this.yylloc.range[1]++;\n        }\n      }\n\n      if (lines) {\n        this.yylineno++;\n        this.yylloc.last_line++;\n        this.yylloc.last_column = 0;\n      } else {\n        this.yylloc.last_column++;\n      }\n\n      this.yylloc.range[1]++;\n      this._input = this._input.slice(slice_len);\n      return ch;\n    },\n\n    /**\n     * unshifts one char (or an entire string) into the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    unput: function lexer_unput(ch) {\n      var len = ch.length;\n      var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n      this._input = ch + this._input;\n      this.yytext = this.yytext.substr(0, this.yytext.length - len);\n      this.yyleng = this.yytext.length;\n      this.offset -= len;\n      this.match = this.match.substr(0, this.match.length - len);\n      this.matched = this.matched.substr(0, this.matched.length - len);\n\n      if (lines.length > 1) {\n        this.yylineno -= lines.length - 1;\n        this.yylloc.last_line = this.yylineno + 1;\n\n        // Get last entirely matched line into the `pre_lines[]` array's\n        // last index slot; we don't mind when other previously \n        // matched lines end up in the array too. \n        var pre = this.match;\n\n        var pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n\n        if (pre_lines.length === 1) {\n          pre = this.matched;\n          pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n        }\n\n        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;\n      } else {\n        this.yylloc.last_column -= len;\n      }\n\n      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;\n      this.done = false;\n      return this;\n    },\n\n    /**\n     * cache matched text and append it on next action\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    more: function lexer_more() {\n      this._more = true;\n      return this;\n    },\n\n    /**\n     * signal the lexer that this rule fails to match the input, so the\n     * next matching rule (regex) should be tested instead.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    reject: function lexer_reject() {\n      if (this.options.backtrack_lexer) {\n        this._backtrack = true;\n      } else {\n        // when the `parseError()` call returns, we MUST ensure that the error is registered.\n        // We accomplish this by signaling an 'error' token to be produced for the current\n        // `.lex()` run.\n        var lineno_msg = '';\n\n        if (this.yylloc) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo(\n          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',\n          false\n        );\n\n        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n      }\n\n      return this;\n    },\n\n    /**\n     * retain first n characters of the match\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    less: function lexer_less(n) {\n      return this.unput(this.match.slice(n));\n    },\n\n    /**\n     * return (part of the) already matched input, i.e. for error\n     * messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of\n     * input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    pastInput: function lexer_pastInput(maxSize, maxLines) {\n      var past = this.matched.substring(0, this.matched.length - this.match.length);\n\n      if (maxSize < 0)\n        maxSize = past.length;\n      else if (!maxSize)\n        maxSize = 20;\n\n      if (maxLines < 0)\n        maxLines = past.length;          // can't ever have more input lines than this! \n      else if (!maxLines)\n        maxLines = 1;\n\n      // `substr` anticipation: treat \\r\\n as a single character and take a little\n      // more than necessary so that we can still properly check against maxSize\n      // after we've transformed and limited the newLines in here:\n      past = past.substr(-maxSize * 2 - 2);\n\n      // now that we have a significantly reduced string to process, transform the newlines\n      // and chop them, then limit them:\n      var a = past.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      a = a.slice(-maxLines);\n      past = a.join('\\n');\n\n      // When, after limiting to maxLines, we still have too much to return,\n      // do add an ellipsis prefix...\n      if (past.length > maxSize) {\n        past = '...' + past.substr(-maxSize);\n      }\n\n      return past;\n    },\n\n    /**\n     * return (part of the) upcoming input, i.e. for error messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     *\n     * > ### NOTE ###\n     * >\n     * > *\"upcoming input\"* is defined as the whole of the both\n     * > the *currently lexed* input, together with any remaining input\n     * > following that. *\"currently lexed\"* input is the input \n     * > already recognized by the lexer but not yet returned with\n     * > the lexer token. This happens when you are invoking this API\n     * > from inside any lexer rule action code block. \n     * >\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {\n      var next = this.match;\n\n      if (maxSize < 0)\n        maxSize = next.length + this._input.length;\n      else if (!maxSize)\n        maxSize = 20;\n\n      if (maxLines < 0)\n        maxLines = maxSize;          // can't ever have more input lines than this! \n      else if (!maxLines)\n        maxLines = 1;\n\n      // `substring` anticipation: treat \\r\\n as a single character and take a little\n      // more than necessary so that we can still properly check against maxSize\n      // after we've transformed and limited the newLines in here:\n      if (next.length < maxSize * 2 + 2) {\n        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 \n      }\n\n      // now that we have a significantly reduced string to process, transform the newlines\n      // and chop them, then limit them:\n      var a = next.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      a = a.slice(0, maxLines);\n      next = a.join('\\n');\n\n      // When, after limiting to maxLines, we still have too much to return,\n      // do add an ellipsis postfix...\n      if (next.length > maxSize) {\n        next = next.substring(0, maxSize) + '...';\n      }\n\n      return next;\n    },\n\n    /**\n     * return a string which displays the character position where the\n     * lexing error occurred, i.e. for error messages\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {\n      var pre = this.pastInput(maxPrefix).replace(/\\s/g, ' ');\n      var c = new Array(pre.length + 1).join('-');\n      return pre + this.upcomingInput(maxPostfix).replace(/\\s/g, ' ') + '\\n' + c + '^';\n    },\n\n    /**\n     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).\n     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when\n     * it MAY be NULL) and you MUST have a valid location info object anyway:\n     * then we take the given context of the `preceding` and `following` locations, IFF those are available,\n     * and reconstruct the `actual` location info from those.\n     * If this fails, the heuristic is to take the `current` location, IFF available.\n     * If this fails as well, we assume the sought location is at/around the current lexer position\n     * and then produce that one as a response. DO NOTE that these heuristic/derived location info\n     * values MAY be inaccurate!\n     *\n     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just\n     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {\n      var loc = {\n        first_line: 1,\n        first_column: 0,\n        last_line: 1,\n        last_column: 0,\n        range: [0, 0]\n      };\n\n      if (actual) {\n        loc.first_line = actual.first_line | 0;\n        loc.last_line = actual.last_line | 0;\n        loc.first_column = actual.first_column | 0;\n        loc.last_column = actual.last_column | 0;\n\n        if (actual.range) {\n          loc.range[0] = actual.range[0] | 0;\n          loc.range[1] = actual.range[1] | 0;\n        }\n      }\n\n      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {\n        // plan B: heuristic using preceding and following:\n        if (loc.first_line <= 0 && preceding) {\n          loc.first_line = preceding.last_line | 0;\n          loc.first_column = preceding.last_column | 0;\n\n          if (preceding.range) {\n            loc.range[0] = actual.range[1] | 0;\n          }\n        }\n\n        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {\n          loc.last_line = following.first_line | 0;\n          loc.last_column = following.first_column | 0;\n\n          if (following.range) {\n            loc.range[1] = actual.range[0] | 0;\n          }\n        }\n\n        // plan C?: see if the 'current' location is useful/sane too:\n        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {\n          loc.first_line = current.first_line | 0;\n          loc.first_column = current.first_column | 0;\n\n          if (current.range) {\n            loc.range[0] = current.range[0] | 0;\n          }\n        }\n\n        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {\n          loc.last_line = current.last_line | 0;\n          loc.last_column = current.last_column | 0;\n\n          if (current.range) {\n            loc.range[1] = current.range[1] | 0;\n          }\n        }\n      }\n\n      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter\n      // or plan D heuristics to produce a 'sensible' last_line value:\n      if (loc.last_line <= 0) {\n        if (loc.first_line <= 0) {\n          loc.first_line = this.yylloc.first_line;\n          loc.last_line = this.yylloc.last_line;\n          loc.first_column = this.yylloc.first_column;\n          loc.last_column = this.yylloc.last_column;\n          loc.range[0] = this.yylloc.range[0];\n          loc.range[1] = this.yylloc.range[1];\n        } else {\n          loc.last_line = this.yylloc.last_line;\n          loc.last_column = this.yylloc.last_column;\n          loc.range[1] = this.yylloc.range[1];\n        }\n      }\n\n      if (loc.first_line <= 0) {\n        loc.first_line = loc.last_line;\n        loc.first_column = 0;  // loc.last_column; \n        loc.range[1] = loc.range[0];\n      }\n\n      if (loc.first_column < 0) {\n        loc.first_column = 0;\n      }\n\n      if (loc.last_column < 0) {\n        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);\n      }\n\n      return loc;\n    },\n\n    /**\n     * return a string which displays the lines & columns of input which are referenced \n     * by the given location info range, plus a few lines of context.\n     * \n     * This function pretty-prints the indicated section of the input, with line numbers \n     * and everything!\n     * \n     * This function is very useful to provide highly readable error reports, while\n     * the location range may be specified in various flexible ways:\n     * \n     * - `loc` is the location info object which references the area which should be\n     *   displayed and 'marked up': these lines & columns of text are marked up by `^`\n     *   characters below each character in the entire input range.\n     * \n     * - `context_loc` is the *optional* location info object which instructs this\n     *   pretty-printer how much *leading* context should be displayed alongside\n     *   the area referenced by `loc`. This can help provide context for the displayed\n     *   error, etc.\n     * \n     *   When this location info is not provided, a default context of 3 lines is\n     *   used.\n     * \n     * - `context_loc2` is another *optional* location info object, which serves\n     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*\n     *   context lines to display in the pretty-print output.\n     * \n     *   When this location info is not provided, a default context of 1 line only is\n     *   used.\n     * \n     * Special Notes:\n     * \n     * - when the `loc`-indicated range is very large (about 5 lines or more), then\n     *   only the first and last few lines of this block are printed while a\n     *   `...continued...` message will be printed between them.\n     * \n     *   This serves the purpose of not printing a huge amount of text when the `loc`\n     *   range happens to be huge: this way a manageable & readable output results\n     *   for arbitrary large ranges.\n     * \n     * - this function can display lines of input which whave not yet been lexed.\n     *   `prettyPrintRange()` can access the entire input!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {\n      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);\n      const CONTEXT = 3;\n      const CONTEXT_TAIL = 1;\n      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;\n      var input = this.matched + this._input;\n      var lines = input.split('\\n');\n      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));\n      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));\n      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;\n      var ws_prefix = new Array(lineno_display_width).join(' ');\n      var nonempty_line_indexes = [];\n\n      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {\n        var lno = index + l0;\n        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);\n        var rv = lno_pfx + ': ' + line;\n        var errpfx = new Array(lineno_display_width + 1).join('^');\n        var offset = 2 + 1;\n        var len = 0;\n\n        if (lno === loc.first_line) {\n          offset += loc.first_column;\n\n          len = Math.max(\n            2,\n            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1\n          );\n        } else if (lno === loc.last_line) {\n          len = Math.max(2, loc.last_column + 1);\n        } else if (lno > loc.first_line && lno < loc.last_line) {\n          len = Math.max(2, line.length + 1);\n        }\n\n        if (len) {\n          var lead = new Array(offset).join('.');\n          var mark = new Array(len).join('^');\n          rv += '\\n' + errpfx + lead + mark;\n\n          if (line.trim().length > 0) {\n            nonempty_line_indexes.push(index);\n          }\n        }\n\n        rv = rv.replace(/\\t/g, ' ');\n        return rv;\n      });\n\n      // now make sure we don't print an overly large amount of error area: limit it \n      // to the top and bottom line count:\n      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {\n        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;\n        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;\n        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';\n        intermediate_line += '\\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';\n        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);\n      }\n\n      return rv.join('\\n');\n    },\n\n    /**\n     * helper function, used to produce a human readable description as a string, given\n     * the input `yylloc` location object.\n     * \n     * Set `display_range_too` to TRUE to include the string character index position(s)\n     * in the description if the `yylloc.range` is available.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {\n      var l1 = yylloc.first_line;\n      var l2 = yylloc.last_line;\n      var c1 = yylloc.first_column;\n      var c2 = yylloc.last_column;\n      var dl = l2 - l1;\n      var dc = c2 - c1;\n      var rv;\n\n      if (dl === 0) {\n        rv = 'line ' + l1 + ', ';\n\n        if (dc <= 1) {\n          rv += 'column ' + c1;\n        } else {\n          rv += 'columns ' + c1 + ' .. ' + c2;\n        }\n      } else {\n        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';\n      }\n\n      if (yylloc.range && display_range_too) {\n        var r1 = yylloc.range[0];\n        var r2 = yylloc.range[1] - 1;\n\n        if (r2 <= r1) {\n          rv += ' {String Offset: ' + r1 + '}';\n        } else {\n          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';\n        }\n      }\n\n      return rv;\n    },\n\n    /**\n     * test the lexed token: return FALSE when not a match, otherwise return token.\n     * \n     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`\n     * contains the actually matched text string.\n     * \n     * Also move the input cursor forward and update the match collectors:\n     * \n     * - `yytext`\n     * - `yyleng`\n     * - `match`\n     * - `matches`\n     * - `yylloc`\n     * - `offset`\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    test_match: function lexer_test_match(match, indexed_rule) {\n      var token, lines, backup, match_str, match_str_len;\n\n      if (this.options.backtrack_lexer) {\n        // save context\n        backup = {\n          yylineno: this.yylineno,\n\n          yylloc: {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylloc.last_line,\n            first_column: this.yylloc.first_column,\n            last_column: this.yylloc.last_column,\n            range: this.yylloc.range.slice(0)\n          },\n\n          yytext: this.yytext,\n          match: this.match,\n          matches: this.matches,\n          matched: this.matched,\n          yyleng: this.yyleng,\n          offset: this.offset,\n          _more: this._more,\n          _input: this._input,\n\n          //_signaled_error_token: this._signaled_error_token,\n          yy: this.yy,\n\n          conditionStack: this.conditionStack.slice(0),\n          done: this.done\n        };\n      }\n\n      match_str = match[0];\n      match_str_len = match_str.length;\n\n      // if (match_str.indexOf('\\n') !== -1 || match_str.indexOf('\\r') !== -1) {\n      lines = match_str.split(/(?:\\r\\n?|\\n)/g);\n\n      if (lines.length > 1) {\n        this.yylineno += lines.length - 1;\n        this.yylloc.last_line = this.yylineno + 1;\n        this.yylloc.last_column = lines[lines.length - 1].length;\n      } else {\n        this.yylloc.last_column += match_str_len;\n      }\n\n      // }\n      this.yytext += match_str;\n\n      this.match += match_str;\n      this.matched += match_str;\n      this.matches = match;\n      this.yyleng = this.yytext.length;\n      this.yylloc.range[1] += match_str_len;\n\n      // previous lex rules MAY have invoked the `more()` API rather than producing a token:\n      // those rules will already have moved this `offset` forward matching their match lengths,\n      // hence we must only add our own match length now:\n      this.offset += match_str_len;\n\n      this._more = false;\n      this._backtrack = false;\n      this._input = this._input.slice(match_str_len);\n\n      // calling this method:\n      //\n      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}\n      token = this.performAction.call(\n        this,\n        this.yy,\n        indexed_rule,\n        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */\n      );\n\n      // otherwise, when the action codes are all simple return token statements:\n      //token = this.simpleCaseActionClusters[indexed_rule];\n\n      if (this.done && this._input) {\n        this.done = false;\n      }\n\n      if (token) {\n        return token;\n      } else if (this._backtrack) {\n        // recover context\n        for (var k in backup) {\n          this[k] = backup[k];\n        }\n\n        this.__currentRuleSet__ = null;\n        return false;  // rule action called reject() implying the next rule should be tested instead. \n      } else if (this._signaled_error_token) {\n        // produce one 'error' token as `.parseError()` in `reject()`\n        // did not guarantee a failure signal by throwing an exception!\n        token = this._signaled_error_token;\n\n        this._signaled_error_token = false;\n        return token;\n      }\n\n      return false;\n    },\n\n    /**\n     * return next match in input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    next: function lexer_next() {\n      if (this.done) {\n        this.clear();\n        return this.EOF;\n      }\n\n      if (!this._input) {\n        this.done = true;\n      }\n\n      var token, match, tempMatch, index;\n\n      if (!this._more) {\n        this.clear();\n      }\n\n      var spec = this.__currentRuleSet__;\n\n      if (!spec) {\n        // Update the ruleset cache as we apparently encountered a state change or just started lexing.\n        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will\n        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps\n        // speed up those activities a tiny bit.\n        spec = this.__currentRuleSet__ = this._currentRules();\n\n        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against\n        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19\n        if (!spec || !spec.rules) {\n          var lineno_msg = '';\n\n          if (this.options.trackPosition) {\n            lineno_msg = ' on line ' + (this.yylineno + 1);\n          }\n\n          var p = this.constructLexErrorInfo(\n            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name \"' + this.topState() + '\"; this is a fatal error and should be reported to the application programmer team!',\n            false\n          );\n\n          // produce one 'error' token until this situation has been resolved, most probably by parse termination!\n          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n        }\n      }\n\n      var rule_ids = spec.rules;\n      var regexes = spec.__rule_regexes;\n      var len = spec.__rule_count;\n\n      // Note: the arrays are 1-based, while `len` itself is a valid index,\n      // hence the non-standard less-or-equal check in the next loop condition!\n      for (var i = 1; i <= len; i++) {\n        tempMatch = this._input.match(regexes[i]);\n\n        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n          match = tempMatch;\n          index = i;\n\n          if (this.options.backtrack_lexer) {\n            token = this.test_match(tempMatch, rule_ids[i]);\n\n            if (token !== false) {\n              return token;\n            } else if (this._backtrack) {\n              match = undefined;\n              continue;  // rule action called reject() implying a rule MISmatch. \n            } else {\n              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n              return false;\n            }\n          } else if (!this.options.flex) {\n            break;\n          }\n        }\n      }\n\n      if (match) {\n        token = this.test_match(match, rule_ids[index]);\n\n        if (token !== false) {\n          return token;\n        }\n\n        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n        return false;\n      }\n\n      if (!this._input) {\n        this.done = true;\n        this.clear();\n        return this.EOF;\n      } else {\n        var lineno_msg = '';\n\n        if (this.options.trackPosition) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo(\n          'Lexical error' + lineno_msg + ': Unrecognized text.',\n          this.options.lexerErrorsAreRecoverable\n        );\n\n        var pendingInput = this._input;\n        var activeCondition = this.topState();\n        var conditionStackDepth = this.conditionStack.length;\n        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n\n        if (token === this.ERROR) {\n          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us\n          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`\n          // has not consumed/modified any pending input or changed state in the error handler:\n          if (!this.matches && // and make sure the input has been modified/consumed ...\n          pendingInput === this._input && // ...or the lexer state has been modified significantly enough\n          // to merit a non-consuming error handling action right now.\n          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {\n            this.input();\n          }\n        }\n\n        return token;\n      }\n    },\n\n    /**\n     * return next match that has a token\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    lex: function lexer_lex() {\n      var r;\n\n      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:\n      if (typeof this.pre_lex === 'function') {\n        r = this.pre_lex.call(this, 0);\n      }\n\n      if (typeof this.options.pre_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.options.pre_lex.call(this, r) || r;\n      }\n\n      if (this.yy && typeof this.yy.pre_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.yy.pre_lex.call(this, r) || r;\n      }\n\n      while (!r) {\n        r = this.next();\n      }\n\n      if (this.yy && typeof this.yy.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.yy.post_lex.call(this, r) || r;\n      }\n\n      if (typeof this.options.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.options.post_lex.call(this, r) || r;\n      }\n\n      if (typeof this.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.post_lex.call(this, r) || r;\n      }\n\n      return r;\n    },\n\n    /**\n     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the \n     * `pre_lex()` nor any of the `post_lex()` callbacks.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    fastLex: function lexer_fastLex() {\n      var r;\n\n      while (!r) {\n        r = this.next();\n      }\n\n      return r;\n    },\n\n    /**\n     * return info about the lexer state that can help a parser or other lexer API user to use the\n     * most efficient means available. This API is provided to aid run-time performance for larger\n     * systems which employ this lexer.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    canIUse: function lexer_canIUse() {\n      var rv = {\n        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'\n      };\n\n      return rv;\n    },\n\n    /**\n     * backwards compatible alias for `pushState()`;\n     * the latter is symmetrical with `popState()` and we advise to use\n     * those APIs in any modern lexer code, rather than `begin()`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    begin: function lexer_begin(condition) {\n      return this.pushState(condition);\n    },\n\n    /**\n     * activates a new lexer condition state (pushes the new lexer\n     * condition state onto the condition stack)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    pushState: function lexer_pushState(condition) {\n      this.conditionStack.push(condition);\n      this.__currentRuleSet__ = null;\n      return this;\n    },\n\n    /**\n     * pop the previously active lexer condition state off the condition\n     * stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    popState: function lexer_popState() {\n      var n = this.conditionStack.length - 1;\n\n      if (n > 0) {\n        this.__currentRuleSet__ = null;\n        return this.conditionStack.pop();\n      } else {\n        return this.conditionStack[0];\n      }\n    },\n\n    /**\n     * return the currently active lexer condition state; when an index\n     * argument is provided it produces the N-th previous condition state,\n     * if available\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    topState: function lexer_topState(n) {\n      n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n      if (n >= 0) {\n        return this.conditionStack[n];\n      } else {\n        return 'INITIAL';\n      }\n    },\n\n    /**\n     * (internal) determine the lexer rule set which is active for the\n     * currently active lexer condition state\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    _currentRules: function lexer__currentRules() {\n      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];\n      } else {\n        return this.conditions['INITIAL'];\n      }\n    },\n\n    /**\n     * return the number of states currently on the stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    stateStackSize: function lexer_stateStackSize() {\n      return this.conditionStack.length;\n    },\n\n    options: {\n      trackPosition: true\n    },\n\n    JisonLexerError: JisonLexerError,\n\n    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {\n      var yy_ = this;\n      var YYSTATE = YY_START;\n\n      switch (yyrulenumber) {\n      case 1:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       \\s+ */\n        /* skip whitespace */\n        break;\n\n      default:\n        return this.simpleCaseActionClusters[yyrulenumber];\n      }\n    },\n\n    simpleCaseActionClusters: {\n      /*! Conditions:: INITIAL */\n      /*! Rule::       (--[0-9a-z-A-Z-]*) */\n      0: 13,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       \\* */\n      2: 5,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       \\/ */\n      3: 6,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       \\+ */\n      4: 3,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       - */\n      5: 4,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)px\\b */\n      6: 15,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)cm\\b */\n      7: 15,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)mm\\b */\n      8: 15,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)in\\b */\n      9: 15,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)pt\\b */\n      10: 15,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)pc\\b */\n      11: 15,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)deg\\b */\n      12: 16,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)grad\\b */\n      13: 16,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)rad\\b */\n      14: 16,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)turn\\b */\n      15: 16,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)s\\b */\n      16: 17,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ms\\b */\n      17: 17,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)Hz\\b */\n      18: 18,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)kHz\\b */\n      19: 18,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dpi\\b */\n      20: 19,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dpcm\\b */\n      21: 19,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dppx\\b */\n      22: 19,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)em\\b */\n      23: 20,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ex\\b */\n      24: 21,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ch\\b */\n      25: 22,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)rem\\b */\n      26: 23,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vw\\b */\n      27: 25,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vh\\b */\n      28: 24,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vmin\\b */\n      29: 26,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vmax\\b */\n      30: 27,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)% */\n      31: 28,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)\\b */\n      32: 11,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       (calc) */\n      33: 9,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       (var) */\n      34: 12,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ([a-z]+) */\n      35: 10,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       \\( */\n      36: 7,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       \\) */\n      37: 8,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       , */\n      38: 14,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       $ */\n      39: 1\n    },\n\n    rules: [\n      /*  0: */  /^(?:(--[\\d\\-A-Za-z]*))/,\n      /*  1: */  /^(?:\\s+)/,\n      /*  2: */  /^(?:\\*)/,\n      /*  3: */  /^(?:\\/)/,\n      /*  4: */  /^(?:\\+)/,\n      /*  5: */  /^(?:-)/,\n      /*  6: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)px\\b)/,\n      /*  7: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)cm\\b)/,\n      /*  8: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)mm\\b)/,\n      /*  9: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)in\\b)/,\n      /* 10: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)pt\\b)/,\n      /* 11: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)pc\\b)/,\n      /* 12: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)deg\\b)/,\n      /* 13: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)grad\\b)/,\n      /* 14: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)rad\\b)/,\n      /* 15: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)turn\\b)/,\n      /* 16: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)s\\b)/,\n      /* 17: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ms\\b)/,\n      /* 18: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)Hz\\b)/,\n      /* 19: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)kHz\\b)/,\n      /* 20: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dpi\\b)/,\n      /* 21: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dpcm\\b)/,\n      /* 22: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dppx\\b)/,\n      /* 23: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)em\\b)/,\n      /* 24: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ex\\b)/,\n      /* 25: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ch\\b)/,\n      /* 26: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)rem\\b)/,\n      /* 27: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vw\\b)/,\n      /* 28: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vh\\b)/,\n      /* 29: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vmin\\b)/,\n      /* 30: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vmax\\b)/,\n      /* 31: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)%)/,\n      /* 32: */  /^(?:(\\d+(\\.\\d*)?|\\.\\d+)\\b)/,\n      /* 33: */  /^(?:(calc))/,\n      /* 34: */  /^(?:(var))/,\n      /* 35: */  /^(?:([a-z]+))/,\n      /* 36: */  /^(?:\\()/,\n      /* 37: */  /^(?:\\))/,\n      /* 38: */  /^(?:,)/,\n      /* 39: */  /^(?:$)/\n    ],\n\n    conditions: {\n      'INITIAL': {\n        rules: [\n          0,\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16,\n          17,\n          18,\n          19,\n          20,\n          21,\n          22,\n          23,\n          24,\n          25,\n          26,\n          27,\n          28,\n          29,\n          30,\n          31,\n          32,\n          33,\n          34,\n          35,\n          36,\n          37,\n          38,\n          39\n        ],\n\n        inclusive: true\n      }\n    }\n  };\n\n  return lexer;\n}();\nparser.lexer = lexer;\n\n\n\nfunction Parser() {\n  this.yy = {};\n}\nParser.prototype = parser;\nparser.Parser = Parser;\n\nreturn new Parser();\n})();\n\n        \n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = parser;\n  exports.Parser = parser.Parser;\n  exports.parse = function () {\n    return parser.parse.apply(parser, arguments);\n  };\n  \n}\n"]},"metadata":{},"sourceType":"script"}