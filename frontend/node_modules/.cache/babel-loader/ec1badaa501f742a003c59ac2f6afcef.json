{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (calc, node, precision) {\n  var str = stringify(node, precision);\n\n  if (node.type === \"MathExpression\") {\n    // if calc expression couldn't be resolved to a single value, re-wrap it as\n    // a calc()\n    str = calc + \"(\" + str + \")\";\n  }\n\n  return str;\n};\n\nvar _reducer = require(\"./reducer\");\n\nvar order = {\n  \"*\": 0,\n  \"/\": 0,\n  \"+\": 1,\n  \"-\": 1\n};\n\nfunction round(value, prec) {\n  if (prec !== false) {\n    var precision = Math.pow(10, prec);\n    return Math.round(value * precision) / precision;\n  }\n\n  return value;\n}\n\nfunction stringify(node, prec) {\n  switch (node.type) {\n    case \"MathExpression\":\n      {\n        var left = node.left,\n            right = node.right,\n            op = node.operator;\n        var str = \"\";\n        if (left.type === 'MathExpression' && order[op] < order[left.operator]) str += \"(\" + stringify(left, prec) + \")\";else str += stringify(left, prec);\n        str += \" \" + node.operator + \" \";\n\n        if (right.type === 'MathExpression' && order[op] < order[right.operator]) {\n          str += \"(\" + stringify(right, prec) + \")\";\n        } else if (right.type === 'MathExpression' && op === \"-\" && [\"+\", \"-\"].includes(right.operator)) {\n          // fix #52 : a-(b+c) = a-b-c\n          right.operator = (0, _reducer.flip)(right.operator);\n          str += stringify(right, prec);\n        } else {\n          str += stringify(right, prec);\n        }\n\n        return str;\n      }\n\n    case \"Value\":\n      return round(node.value, prec);\n\n    case 'CssVariable':\n      if (node.fallback) {\n        return \"var(\" + node.value + \", \" + stringify(node.fallback, prec, true) + \")\";\n      }\n\n      return \"var(\" + node.value + \")\";\n\n    case 'Calc':\n      if (node.prefix) {\n        return \"-\" + node.prefix + \"-calc(\" + stringify(node.value, prec) + \")\";\n      }\n\n      return \"calc(\" + stringify(node.value, prec) + \")\";\n\n    default:\n      return round(node.value, prec) + node.unit;\n  }\n}\n\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/bermed28/Desktop/db-booking-frontend/node_modules/reduce-css-calc/dist/lib/stringifier.js"],"names":["Object","defineProperty","exports","value","default","calc","node","precision","str","stringify","type","_reducer","require","order","round","prec","Math","pow","left","right","op","operator","includes","flip","fallback","prefix","unit","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (calc, node, precision) {\n  var str = stringify(node, precision);\n\n  if (node.type === \"MathExpression\") {\n    // if calc expression couldn't be resolved to a single value, re-wrap it as\n    // a calc()\n    str = calc + \"(\" + str + \")\";\n  }\n  return str;\n};\n\nvar _reducer = require(\"./reducer\");\n\nvar order = {\n  \"*\": 0,\n  \"/\": 0,\n  \"+\": 1,\n  \"-\": 1\n};\n\nfunction round(value, prec) {\n  if (prec !== false) {\n    var precision = Math.pow(10, prec);\n    return Math.round(value * precision) / precision;\n  }\n  return value;\n}\n\nfunction stringify(node, prec) {\n  switch (node.type) {\n    case \"MathExpression\":\n      {\n        var left = node.left,\n            right = node.right,\n            op = node.operator;\n\n        var str = \"\";\n\n        if (left.type === 'MathExpression' && order[op] < order[left.operator]) str += \"(\" + stringify(left, prec) + \")\";else str += stringify(left, prec);\n\n        str += \" \" + node.operator + \" \";\n\n        if (right.type === 'MathExpression' && order[op] < order[right.operator]) {\n          str += \"(\" + stringify(right, prec) + \")\";\n        } else if (right.type === 'MathExpression' && op === \"-\" && [\"+\", \"-\"].includes(right.operator)) {\n          // fix #52 : a-(b+c) = a-b-c\n          right.operator = (0, _reducer.flip)(right.operator);\n          str += stringify(right, prec);\n        } else {\n          str += stringify(right, prec);\n        }\n\n        return str;\n      }\n    case \"Value\":\n      return round(node.value, prec);\n    case 'CssVariable':\n      if (node.fallback) {\n        return \"var(\" + node.value + \", \" + stringify(node.fallback, prec, true) + \")\";\n      }\n      return \"var(\" + node.value + \")\";\n    case 'Calc':\n      if (node.prefix) {\n        return \"-\" + node.prefix + \"-calc(\" + stringify(node.value, prec) + \")\";\n      }\n      return \"calc(\" + stringify(node.value, prec) + \")\";\n    default:\n      return round(node.value, prec) + node.unit;\n  }\n}\n\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}