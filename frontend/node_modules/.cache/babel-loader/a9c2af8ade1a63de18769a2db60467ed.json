{"ast":null,"code":"function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes);\n\n    if (type !== \"function\") {\n      return buf;\n    }\n\n    return value + \"(\" + (node.before || \"\") + buf + (node.after || \"\") + (node.unclosed ? \"\" : \")\");\n  }\n\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n\n    return result;\n  }\n\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;","map":{"version":3,"sources":["/Users/bermed28/Desktop/booking-system-stackoverflowers-studios/frontend/node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/stringify.js"],"names":["stringifyNode","node","custom","type","value","buf","customResult","undefined","quote","unclosed","before","after","Array","isArray","nodes","stringify","result","i","length","module","exports"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AACnC,MAAIC,IAAI,GAAGF,IAAI,CAACE,IAAhB;AACA,MAAIC,KAAK,GAAGH,IAAI,CAACG,KAAjB;AACA,MAAIC,GAAJ;AACA,MAAIC,YAAJ;;AAEA,MAAIJ,MAAM,IAAI,CAACI,YAAY,GAAGJ,MAAM,CAACD,IAAD,CAAtB,MAAkCM,SAAhD,EAA2D;AACzD,WAAOD,YAAP;AACD,GAFD,MAEO,IAAIH,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,OAAhC,EAAyC;AAC9C,WAAOC,KAAP;AACD,GAFM,MAEA,IAAID,IAAI,KAAK,QAAb,EAAuB;AAC5BE,IAAAA,GAAG,GAAGJ,IAAI,CAACO,KAAL,IAAc,EAApB;AACA,WAAOH,GAAG,GAAGD,KAAN,IAAeH,IAAI,CAACQ,QAAL,GAAgB,EAAhB,GAAqBJ,GAApC,CAAP;AACD,GAHM,MAGA,IAAIF,IAAI,KAAK,SAAb,EAAwB;AAC7B,WAAO,OAAOC,KAAP,IAAgBH,IAAI,CAACQ,QAAL,GAAgB,EAAhB,GAAqB,IAArC,CAAP;AACD,GAFM,MAEA,IAAIN,IAAI,KAAK,KAAb,EAAoB;AACzB,WAAO,CAACF,IAAI,CAACS,MAAL,IAAe,EAAhB,IAAsBN,KAAtB,IAA+BH,IAAI,CAACU,KAAL,IAAc,EAA7C,CAAP;AACD,GAFM,MAEA,IAAIC,KAAK,CAACC,OAAN,CAAcZ,IAAI,CAACa,KAAnB,CAAJ,EAA+B;AACpCT,IAAAA,GAAG,GAAGU,SAAS,CAACd,IAAI,CAACa,KAAN,CAAf;;AACA,QAAIX,IAAI,KAAK,UAAb,EAAyB;AACvB,aAAOE,GAAP;AACD;;AACD,WACED,KAAK,GACL,GADA,IAECH,IAAI,CAACS,MAAL,IAAe,EAFhB,IAGAL,GAHA,IAICJ,IAAI,CAACU,KAAL,IAAc,EAJf,KAKCV,IAAI,CAACQ,QAAL,GAAgB,EAAhB,GAAqB,GALtB,CADF;AAQD;;AACD,SAAOL,KAAP;AACD;;AAED,SAASW,SAAT,CAAmBD,KAAnB,EAA0BZ,MAA1B,EAAkC;AAChC,MAAIc,MAAJ,EAAYC,CAAZ;;AAEA,MAAIL,KAAK,CAACC,OAAN,CAAcC,KAAd,CAAJ,EAA0B;AACxBE,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAKC,CAAC,GAAGH,KAAK,CAACI,MAAN,GAAe,CAAxB,EAA2B,CAACD,CAA5B,EAA+BA,CAAC,IAAI,CAApC,EAAuC;AACrCD,MAAAA,MAAM,GAAGhB,aAAa,CAACc,KAAK,CAACG,CAAD,CAAN,EAAWf,MAAX,CAAb,GAAkCc,MAA3C;AACD;;AACD,WAAOA,MAAP;AACD;;AACD,SAAOhB,aAAa,CAACc,KAAD,EAAQZ,MAAR,CAApB;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBL,SAAjB","sourcesContent":["function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n"]},"metadata":{},"sourceType":"script"}